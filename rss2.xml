<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Way2BeBetter</title>
    <link>http://v2better.top/</link>
    
    <atom:link href="http://v2better.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Just A Blog</description>
    <pubDate>Sat, 07 Sep 2024 02:46:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>blockchain</title>
      <link>http://v2better.top/2024/06/26/blockchain/</link>
      <guid>http://v2better.top/2024/06/26/blockchain/</guid>
      <pubDate>Tue, 25 Jun 2024 16:21:23 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;基于堆栈的语言，比如forth：&quot;&gt;&lt;a href=&quot;#基于堆栈的语言，比如forth：&quot; class=&quot;headerlink&quot; title=&quot;基于堆栈的语言，比如forth：&quot;&gt;&lt;/a&gt;基于堆栈的语言，比如forth：&lt;/h2&gt;&lt;p&gt;示例代码&lt;/p&gt;
&lt;p&gt;以F</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="基于堆栈的语言，比如forth："><a href="#基于堆栈的语言，比如forth：" class="headerlink" title="基于堆栈的语言，比如forth："></a>基于堆栈的语言，比如forth：</h2><p>示例代码</p><p>以Forth为例，展示一个简单的加法操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 + .</span><br></pre></td></tr></table></figure><p>上述代码的解释是：</p><ol><li>将数字3推入堆栈。</li><li>将数字4推入堆栈。</li><li>执行加法操作，将堆栈顶部的两个数字相加，并将结果（7）推回堆栈。</li><li><code>.</code> 操作符从堆栈中取出并打印结果。</li></ol><h2 id="图灵不完备"><a href="#图灵不完备" class="headerlink" title="图灵不完备"></a>图灵不完备</h2><p>  比特币交易脚本语言包含许多运算符，但在一个重要方面有意限制——它没有循环或复杂的流程控制能力，除了条件流程控制。这确保了该语言不是图灵完备的，也就是说，脚本具有有限的复杂性和可预测的执行时间。</p><h2 id="图灵完备"><a href="#图灵完备" class="headerlink" title="图灵完备"></a>图灵完备</h2><p>  图灵完备是指在可计算性理论里，如果一系列操作数据的规则（如指令集、编程语言、细胞自动机）按照一定的顺序，可以计算出结果<br>  在给定无限内存的情况下，以太坊可以计算任何图灵机可以计算的算法。”<br>  图灵完备带来运算方便性的同时，也带来安全和资源管理问题。“陷入死循环的打印机可以关闭并再次打开，但是这对于公共区块链却是不可能的”。ETH通过gas机制在保证图灵完备的的同时，限制了程序可以使用的资源量。</p><h2 id="比特币中输入和输出的理解"><a href="#比特币中输入和输出的理解" class="headerlink" title="比特币中输入和输出的理解"></a>比特币中输入和输出的理解</h2><p>  比特币中输入和输出，其主语（对象）是一个交易（TX）</p><p><img src="/img/20190905104834923.jpeg" alt="20190905104834923"></p><h2 id="UTXO（Unspent-Transaction-Output，未花费交易输出）"><a href="#UTXO（Unspent-Transaction-Output，未花费交易输出）" class="headerlink" title="UTXO（Unspent Transaction Output，未花费交易输出）"></a>UTXO（Unspent Transaction Output，未花费交易输出）</h2><p>  每一笔TX都会消耗一个或多个UTXO，生成一个或多个UTXO<br>  交易输入（input）引用之前交易的UTXO<br>  交易输出（output）生成新的UTXO<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">以下展示TX示例 </span><br><span class="line">（1）A与B交易（忽略手续费）</span><br><span class="line">输入：</span><br><span class="line">    引用了A持有的含有5个BTC的UTXO</span><br><span class="line">输出：</span><br><span class="line">    2个BTC发给B（新UTXO，归B持有）</span><br><span class="line">    找零3个BTC（新UTXO，仍归A持有）</span><br><span class="line">    </span><br><span class="line">（2）合并UTXO操作（忽略手续费）</span><br><span class="line">输入：</span><br><span class="line">    A的3个UTXO，分别含有0.5，1.5，3个BTC</span><br><span class="line">输出：</span><br><span class="line">    一个含5个BTC的UTXO（归A持有）</span><br></pre></td></tr></table></figure></p><p>《精通比特币 第三版》原文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用比特币的区块链存储与比特币支付无关的数据是一个颇具争议的议题。许多人认为这种使用是滥用的，希望予以遏制。而另一些人则将其视为区块链技术强大功能的展示，并希望鼓励这种实验。反对包含非支付数据的人士认为，这给运行完整比特币节点的人带来了负担，因为他们需要承担为区块链不打算承载的数据而进行的磁盘存储成本。此外，这样的交易可能会创建无法被花费的UTXO，使用传统比特币地址作为自由格式的20字节字段。由于该地址用于存储数据，它不对应于私钥，因此生成的UTXO永远无法被花费；这是一个虚假的支付。因此，永远无法被花费的这些交易从未从UTXO集中移除，并导致UTXO数据库的大小永远增加，或者说“膨胀”。</span><br></pre></td></tr></table></figure><p>  我的理解是，UTXO被花费并不能缓解数据膨胀，因为根据UTXO的特点，UTXO被花费后会生成一个或多个UTXO，UTXO数据库仍然是膨胀的。与原文想法相同的是，无法花费的“虚假”UTXO应被存储在区块链中而不是UTXO数据库中。<br>  解决方式是引入OP_RETURN，OP_RETURN脚本没有对应的输入，因此无法用于花费</p><h2 id="有效区块的特征"><a href="#有效区块的特征" class="headerlink" title="有效区块的特征"></a>有效区块的特征</h2><p>• 区块数据结构在语法上是有效的。 </p><p>• 区块头哈希小于目标值（实施工作证明）。</p><p>• 区块时间戳位于 MTP 和未来两小时之间（允许时间误差）。</p><p>• 区块权重在可接受范围内。 </p><p>• 第一个交易（仅第一个）是 coinbase 交易。 </p><p>• 区块中的所有交易都使用“交易独立验证”部分讨论的交易清单进行验证。</p><h2 id="区块确认时间为何是10分钟"><a href="#区块确认时间为何是10分钟" class="headerlink" title="区块确认时间为何是10分钟"></a>区块确认时间为何是10分钟</h2><ol><li>若每个区块确认时间过短，会导致安全性降低：当区块生成时间缩短时，网络节点之间同步区块的时间变少，导致多个矿工可能同时挖出有效区块。这样会增加意外分叉的发生率，导致一些矿工的工作被浪费。</li><li>若每个区块确认时间过长：诚然，安全性会变高；但是会导致交易确认延迟，区块吞吐量下降等问题</li></ol>]]></content:encoded>
      
      
      
      
      <comments>http://v2better.top/2024/06/26/blockchain/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>深度学习预测前置知识</title>
      <link>http://v2better.top/2024/05/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%A2%84%E6%B5%8B%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</link>
      <guid>http://v2better.top/2024/05/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%A2%84%E6%B5%8B%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</guid>
      <pubDate>Tue, 28 May 2024 08:38:40 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;解析解:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    解可以用一个公式简单地表达出来， 这类解叫作解析解（analytical solution）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;梯度下降&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​     它通过不</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>解析解:</strong></p><p>​    解可以用一个公式简单地表达出来， 这类解叫作解析解（analytical solution）</p><p><strong><em>梯度下降</em>:</strong></p><p>​     它通过不断地在损失函数递减的方向上更新参数来降低误差。</p><p>​      梯度下降最简单的用法是计算损失函数（数据集中所有样本的损失均值） 关于模型参数的导数（在这里也可以称为梯度）</p><p><strong><em>泛化</em>（generalization）:</strong></p><p>​    找到一组参数，这组参数能够在我们从未见过的数据上实现较低的损失</p><p><strong>超参数:</strong></p><p>​    这些可以调整但不在训练过程中更新的参数称为<em>超参数</em>（hyperparameter）</p><p>​    <em>调参</em>（hyperparameter tuning）是选择超参数的过程</p><p><strong>random.shuffle():</strong></p><p>​    在训练机器学习模型时，经常会对数据进行随机打乱的操作。这有助于模型学习更好地泛化，因为模型不会过于依赖于特定的样本顺序。通过随机打乱数据，模型在每个批次中都能够看到不同的样本，从而更好地学习数据的分布和模式。</p><p><strong>归一化，标准化：</strong></p><p><strong>sigmoid函数：</strong></p><p>f(x) = 1/(1+e^-x)</p><h2 id="现阶段主流的股价预测模型"><a href="#现阶段主流的股价预测模型" class="headerlink" title="现阶段主流的股价预测模型"></a>现阶段主流的股价预测模型</h2><h3 id="1-ARIMA模型"><a href="#1-ARIMA模型" class="headerlink" title="1.ARIMA模型"></a>1.ARIMA模型</h3><p>ARIMA模型（英语：AutoregressiveIntegratedMovingAverage model），差分整合移动平均自回归模型，又称整合移动平均自回归模型（移动也可称作滑动），时间序列预测分析方法之一。ARIMA（p，d，q）中，AR是”自回归”，p为自回归项数；MA为”滑动平均”，q为滑动平均项数，d为使之成为平稳序列所做的差分次数（阶数）。“差分”一词虽未出现在ARIMA的英文名称中，却是关键步骤。ARIMA 模型是在平稳的时间序列基础上建立起来的，因此时间序列的平稳性是建模的重要前提。检验时间序列模型平稳的方法一般采用 ADF 单位根检验模型去检验。当然如果时间序列不稳定，也可以通过一些操作去使得时间序列稳定（比如取对数，差分），然后进行 ARIMA 模型预测，得到稳定的时间序列的预测结果，然后对预测结果进行之前使序列稳定的操作的逆操作（取指数，差分的逆操作），就可以得到原始数据的预测结果。</p><h3 id="2-基于随机过程的马尔科夫链模型"><a href="#2-基于随机过程的马尔科夫链模型" class="headerlink" title="2.基于随机过程的马尔科夫链模型"></a>2.基于随机过程的马尔科夫链模型</h3><p>马尔科夫过程是研究事物状态以及其状态转移规律的理论，适合于时间序列以及空间序列，一个时间与状态都是离散的马尔科夫过程叫做马尔科夫链，也叫马氏链（Markov Chain），马氏链模型是一类描述随机动态系统的模型，其特点是①系统每个时刻所处的状态都是随机的，②从一个时刻到下一个时刻的状态按照一定的概率转移，③下一个时刻的状态只取决于当前时刻的状态和转移概率，与其他时刻状态无关。</p><h3 id="3-基于SVM的模型"><a href="#3-基于SVM的模型" class="headerlink" title="3.基于SVM的模型"></a>3.基于SVM的模型</h3><p>支持向量机（SVM）是Vapnik和Cortes于1995年首先提出的，建立在统计学习理论的VC维理论和结构风险最小原理基础上的，它在解决小样本、非线性及高维模式识别中表现出许多特有的优势。支持向量机将非线性问题映射到高维空间，引入核函数，解决了非线性分类问题。支持向量回归（SVR）是支持向量机的推广，通过引入ε不敏感损失函数，将问题转化为通过对已知的样本数据学习找到一个拟合函数，对未知的数据进行预测，这个函数f(x)对实际的 值最大偏差为ε，从而构建回归模型。在金融领域的应用中，Trafalis和Ince研究发现SVR的预测精度远高于MLP（多层感知机）和ARIMA（差分滑动平均自回归模型），并且与神经网络相比有更加出色的性能。</p><h3 id="4-基于XGBoost集成树模型"><a href="#4-基于XGBoost集成树模型" class="headerlink" title="4.基于XGBoost集成树模型"></a>4.基于XGBoost集成树模型</h3><p>XGBoost算法是陈天奇博士于2016年提出的基于回归树的提升算法，在市场价格估计、高能物理事件分类、网络文本分类、客户行为分析等诸多机器学习任务中均表现了出色的性能，并且算法因其高度可扩展性和并行化能力，在大规模数据回归和分类任务上也有着优异的表现。2017年，Ren年将XGBoost与卷积神经网络结合，用于图像分类；同年，Chen将加权的XGBoost模型应用于雷达信号分类并取得了很好的效果。</p><h3 id="5-基于深度学习的模型"><a href="#5-基于深度学习的模型" class="headerlink" title="5.基于深度学习的模型"></a>5.基于深度学习的模型</h3><p>近年来，深度学习方法在人工智能领域取得了突破性的进展，深度神经网络在图像识别、人脸检测与识别、语音识别、目标捕捉、机器翻译等多个领域都有长足的进步。一方面由于积累的数据量的提高，达到了深度学习所需要的量级，另一方面，机器运算性能的提升，也使深度学习方法有了硬件的基础。深度学习方法可以通过组合浅层次的特征形成更加抽象的高层特征表示，以发现数据的深层次隐含关系，通过多层神经网络的堆叠和激活函数的选取，可以更好地拟合复杂的非线性函数。由于市场规律的复杂性、市场价格的波动性、影响因素的多样性，仅仅依赖传统的策略分析和模型不足以应对这些挑战，而深度学习方法的引入，能够提高对这些问题的解决能力，训练出泛化能力更强的模型，对股票投资来说是具有重要的参考意义。</p><p>由于股价数据具有很强的时间关联性，我们自然想到使用LSTM（Long Short-Term Memory）或者GRU（Gated Recurrent Unit）模型挖掘股价数据在时间上的相关性。同时，中国股票市场受政策面影响很大，经济新闻和上市公司财报等文本数据也会成为股价波动的重要原因。目前研究者们普遍在股价数据的时间序列特征和经济金融信息文本特征两个大方面，使用深度学习模型对其进行预测和分析，也有学者综合以上两种特征，构造既包括技术面参数也包括基本面分析的股价特征向量，输入到模型进行学习，均取得了不错的效果，并有多种模型已经使用到荐股软件或者金融领域中。本文作为综述，只简单的介绍模型以及其基本原理，并期待相关模型能在论文和实验中表现出优秀的性能。</p>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/python/">python</category>
      
      
      <comments>http://v2better.top/2024/05/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%A2%84%E6%B5%8B%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>nonlocal解释</title>
      <link>http://v2better.top/2024/05/28/nonlocal%E8%A7%A3%E9%87%8A/</link>
      <guid>http://v2better.top/2024/05/28/nonlocal%E8%A7%A3%E9%87%8A/</guid>
      <pubDate>Tue, 28 May 2024 08:34:48 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;nonlocal-global&quot;&gt;&lt;a href=&quot;#nonlocal-global&quot; class=&quot;headerlink&quot; title=&quot;nonlocal global&quot;&gt;&lt;/a&gt;nonlocal global&lt;/h2&gt;&lt;p&gt;对nonlocal 关键字感到有些困</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="nonlocal-global"><a href="#nonlocal-global" class="headerlink" title="nonlocal global"></a>nonlocal global</h2><p>对nonlocal 关键字感到有些困惑，上手实践一下</p><p>Definition：</p><p>The <code>nonlocal</code> keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function.</p><p>Use the keyword <code>nonlocal</code> to declare that the variable is not local.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="string">&quot;Global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    count = <span class="string">&#x27;Enclosing&#x27;</span><span class="comment">#如果不事先声明，那么函数b中的nonlocal就会报错</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">        count = <span class="string">&#x27;Local&#x27;</span></span><br><span class="line">    b()</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a()</span><br><span class="line">    <span class="built_in">print</span>(count)<span class="comment">#输出Global</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enclosing</span><br><span class="line">Local</span><br><span class="line">Global</span><br></pre></td></tr></table></figure><p>nonlocal 可以让a()中count变量变为非局部，可以让b()使用</p><h4 id="global作为对比"><a href="#global作为对比" class="headerlink" title="global作为对比"></a>global作为对比</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">        <span class="keyword">global</span> a<span class="comment">#没有global，则a=a+1会出错</span></span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/python/">python</category>
      
      
      <comments>http://v2better.top/2024/05/28/nonlocal%E8%A7%A3%E9%87%8A/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Bayes</title>
      <link>http://v2better.top/2024/04/03/Bayes/</link>
      <guid>http://v2better.top/2024/04/03/Bayes/</guid>
      <pubDate>Wed, 03 Apr 2024 06:41:48 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;贝叶斯算法是一类基于贝叶斯定理的统计方法，用于进行概率推断和分类任务。它以18世纪的英国数学家托马斯·贝叶斯的名字命名。贝叶斯算法的核心思想是利用先验概率和观测数据来计算后验概率，从而进行推断或分类。&lt;/p&gt;
&lt;p&gt;下面是贝叶斯算法的基本原理和步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;l</description>
        
      
      
      
      <content:encoded><![CDATA[<p>贝叶斯算法是一类基于贝叶斯定理的统计方法，用于进行概率推断和分类任务。它以18世纪的英国数学家托马斯·贝叶斯的名字命名。贝叶斯算法的核心思想是利用先验概率和观测数据来计算后验概率，从而进行推断或分类。</p><p>下面是贝叶斯算法的基本原理和步骤：</p><ol><li><p><strong>贝叶斯定理</strong>：贝叶斯定理描述了在给定观测数据的情况下，计算参数的后验概率。其数学表达式为：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex;" xmlns="http://www.w3.org/2000/svg" width="22.167ex" height="3.607ex" role="img" focusable="false" viewbox="0 -1047.1 9797.9 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(2167.8,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(2723.6,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(3482.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(4149.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(5205.1,0)"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(1899,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(2177,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(2927,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3316,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(3594,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(4345,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4734,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(5484,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mrow" transform="translate(1487.5,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(1899,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><rect width="4352.8" height="60" x="120" y="220"/></g></g></g></svg></mjx-container></p><p>其中：</p><p><img src="/img/image-20240403150126867.png" alt="image-20240403150126867"></p></li><li><p><strong>先验概率</strong>：在贝叶斯推断中，先验概率是在观测数据之前对事件发生概率的估计。它是根据经验知识或先前的数据进行估计的。</p></li><li><p><strong>似然度</strong>：似然度是在给定参数或假设的情况下观测到数据的概率。它描述了数据如何依赖于参数或假设。</p></li><li><p><strong>后验概率</strong>：后验概率是在观测到数据后对参数或假设的更新概率。它是通过贝叶斯定理计算得到的。</p></li><li><p><strong>贝叶斯分类器</strong>：在分类任务中，贝叶斯算法可以用来建立分类模型。通过估计每个类别的先验概率和似然度，可以计算出给定观测数据后每个类别的后验概率，并选择具有最高后验概率的类别作为预测结果。</p></li><li><p><strong>贝叶斯网络</strong>：贝叶斯网络是一种用图形表示变量之间条件依赖关系的概率图模型。它由节点和有向边组成，节点表示随机变量，有向边表示变量之间的依赖关系。贝叶斯网络可以用于推断概率、预测变量值和解释因果关系等任务。</p></li></ol><p>总的来说，贝叶斯算法通过利用贝叶斯定理将先验知识和观测数据结合起来，实现了对参数或假设的更新和推断，从而在不确定性环境中进行概率推断和分类。</p><p>朴素贝叶斯算法包括<code>GaussianNB</code>、<code>MultinomialNB</code> 和 <code>BernoulliNB</code> 等贝叶斯分类器</p><ol><li><strong>高斯朴素贝叶斯（Gaussian Naive Bayes）</strong>：<ul><li>适用于特征的分布服从高斯分布（正态分布）的情况。</li><li>特征数据是连续型变量时，通常使用高斯朴素贝叶斯。</li><li>在 <code>scikit-learn</code> 中，使用 <code>GaussianNB</code> 类来实现高斯朴素贝叶斯分类器。</li></ul></li><li><strong>多项式朴素贝叶斯（Multinomial Naive Bayes）</strong>：<ul><li>适用于特征的分布是多项分布的情况，即特征是表示计数的离散型变量。</li><li>在文本分类等问题中，特征通常表示单词出现的频次或文档中的词袋模型，这种情况下使用多项式朴素贝叶斯比较合适。</li><li>在 <code>scikit-learn</code> 中，使用 <code>MultinomialNB</code> 类来实现多项式朴素贝叶斯分类器。</li></ul></li><li><strong>伯努利朴素贝叶斯（Bernoulli Naive Bayes）</strong>：<ul><li>适用于特征是布尔型变量（二元变量）的情况，即特征是表示是否出现的二值型变量。</li><li>在文本分类中，通常将特征表示为单词是否出现在文档中，这种情况下使用伯努利朴素贝叶斯比较合适。</li><li>在 <code>scikit-learn</code> 中，使用 <code>BernoulliNB</code> 类来实现伯努利朴素贝叶斯分类器。</li></ul></li></ol>]]></content:encoded>
      
      
      
      
      <comments>http://v2better.top/2024/04/03/Bayes/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数据增强</title>
      <link>http://v2better.top/2024/03/26/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/</link>
      <guid>http://v2better.top/2024/03/26/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/</guid>
      <pubDate>Tue, 26 Mar 2024 11:59:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Mosaic: &lt;/p&gt;
&lt;p&gt;​        Mosaic数据增强是一种用于图像数据增强的技术，主要用于目标检测任务。它通过将多个图像拼接成一个大图像来增加训练数据的多样性。&lt;/p&gt;
&lt;p&gt;Copy paste:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     &amp;quot;Co</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Mosaic: </p><p>​        Mosaic数据增强是一种用于图像数据增强的技术，主要用于目标检测任务。它通过将多个图像拼接成一个大图像来增加训练数据的多样性。</p><p>Copy paste:</p><pre><code>     &quot;Copy-paste&quot; 数据增强是一种用于目标检测任务的技术，它通过从原始图像中复制并粘贴目标来生成新的训练样本。这种方法可以增加数据集中的样本数量，并改变目标在不同背景下的外观和位置。</code></pre><p>Random affine: </p><p>​        “Random affine” 是一种数据增强技术，常用于图像处理任务中，包括图像分类、目标检测、语义分割等。它通过随机变换图像的仿射变换来生成多样化的训练样本，从而提高模型的泛化能力和鲁棒性。</p><p>Mix up:</p><p>​        “Mix Up” 是一种用于数据增强的技术，特别适用于图像分类任务。它通过线性插值的方式将两个图像及其对应的标签混合在一起，生成新的训练样本。</p><p>Augment HSV:</p><p>​        “Augment HSV” 是一种图像数据增强技术，它主要基于修改图像的色调（Hue）、饱和度（Saturation）和亮度（Value）来生成新的训练样本。这些调整是基于图像的HSV颜色空间进行的。</p>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/python/">python</category>
      
      <category domain="http://v2better.top/tags/CV/">CV</category>
      
      
      <comments>http://v2better.top/2024/03/26/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DL</title>
      <link>http://v2better.top/2024/03/04/DL/</link>
      <guid>http://v2better.top/2024/03/04/DL/</guid>
      <pubDate>Mon, 04 Mar 2024 08:04:57 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;解析解:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    解可以用一个公式简单地表达出来， 这类解叫作解析解（analytical solution）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;梯度下降&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​     它通过不</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>解析解:</strong></p><p>​    解可以用一个公式简单地表达出来， 这类解叫作解析解（analytical solution）</p><p><strong><em>梯度下降</em>:</strong></p><p>​     它通过不断地在损失函数递减的方向上更新参数来降低误差。</p><p>​      梯度下降最简单的用法是计算损失函数（数据集中所有样本的损失均值） 关于模型参数的导数（在这里也可以称为梯度）</p><p><strong><em>泛化</em>（generalization）:</strong></p><p>​    找到一组参数，这组参数能够在我们从未见过的数据上实现较低的损失</p><p><strong>超参数:</strong></p><p>​    这些可以调整但不在训练过程中更新的参数称为<em>超参数</em>（hyperparameter）</p><p>​    <em>调参</em>（hyperparameter tuning）是选择超参数的过程</p><p><strong>random.shuffle():</strong></p><p>​    在训练机器学习模型时，经常会对数据进行随机打乱的操作。这有助于模型学习更好地泛化，因为模型不会过于依赖于特定的样本顺序。通过随机打乱数据，模型在每个批次中都能够看到不同的样本，从而更好地学习数据的分布和模式。</p><p><strong>归一化，标准化：</strong></p><p><img src="/img/image-20240114153338534.png" alt="image-20240114153338534"></p><p>​    μ和σ表示均值和标准差</p><p><strong>sigmoid函数：</strong></p><p>f(x) = 1/(1+e^-x)</p><h2 id="现阶段主流的股价预测模型"><a href="#现阶段主流的股价预测模型" class="headerlink" title="现阶段主流的股价预测模型"></a>现阶段主流的股价预测模型</h2><h3 id="1-ARIMA模型"><a href="#1-ARIMA模型" class="headerlink" title="1.ARIMA模型"></a>1.ARIMA模型</h3><p>ARIMA模型（英语：AutoregressiveIntegratedMovingAverage model），差分整合移动平均自回归模型，又称整合移动平均自回归模型（移动也可称作滑动），时间序列预测分析方法之一。ARIMA（p，d，q）中，AR是”自回归”，p为自回归项数；MA为”滑动平均”，q为滑动平均项数，d为使之成为平稳序列所做的差分次数（阶数）。“差分”一词虽未出现在ARIMA的英文名称中，却是关键步骤。ARIMA 模型是在平稳的时间序列基础上建立起来的，因此时间序列的平稳性是建模的重要前提。检验时间序列模型平稳的方法一般采用 ADF 单位根检验模型去检验。当然如果时间序列不稳定，也可以通过一些操作去使得时间序列稳定（比如取对数，差分），然后进行 ARIMA 模型预测，得到稳定的时间序列的预测结果，然后对预测结果进行之前使序列稳定的操作的逆操作（取指数，差分的逆操作），就可以得到原始数据的预测结果。</p><h3 id="2-基于随机过程的马尔科夫链模型"><a href="#2-基于随机过程的马尔科夫链模型" class="headerlink" title="2.基于随机过程的马尔科夫链模型"></a>2.基于随机过程的马尔科夫链模型</h3><p>马尔科夫过程是研究事物状态以及其状态转移规律的理论，适合于时间序列以及空间序列，一个时间与状态都是离散的马尔科夫过程叫做马尔科夫链，也叫马氏链（Markov Chain），马氏链模型是一类描述随机动态系统的模型，其特点是①系统每个时刻所处的状态都是随机的，②从一个时刻到下一个时刻的状态按照一定的概率转移，③下一个时刻的状态只取决于当前时刻的状态和转移概率，与其他时刻状态无关。</p><h3 id="3-基于SVM的模型"><a href="#3-基于SVM的模型" class="headerlink" title="3.基于SVM的模型"></a>3.基于SVM的模型</h3><p>支持向量机（SVM）是Vapnik和Cortes于1995年首先提出的，建立在统计学习理论的VC维理论和结构风险最小原理基础上的，它在解决小样本、非线性及高维模式识别中表现出许多特有的优势。支持向量机将非线性问题映射到高维空间，引入核函数，解决了非线性分类问题。支持向量回归（SVR）是支持向量机的推广，通过引入ε不敏感损失函数，将问题转化为通过对已知的样本数据学习找到一个拟合函数，对未知的数据进行预测，这个函数f(x)对实际的 值最大偏差为ε，从而构建回归模型。在金融领域的应用中，Trafalis和Ince研究发现SVR的预测精度远高于MLP（多层感知机）和ARIMA（差分滑动平均自回归模型），并且与神经网络相比有更加出色的性能。</p><h3 id="4-基于XGBoost集成树模型"><a href="#4-基于XGBoost集成树模型" class="headerlink" title="4.基于XGBoost集成树模型"></a>4.基于XGBoost集成树模型</h3><p>XGBoost算法是陈天奇博士于2016年提出的基于回归树的提升算法，在市场价格估计、高能物理事件分类、网络文本分类、客户行为分析等诸多机器学习任务中均表现了出色的性能，并且算法因其高度可扩展性和并行化能力，在大规模数据回归和分类任务上也有着优异的表现。2017年，Ren年将XGBoost与卷积神经网络结合，用于图像分类；同年，Chen将加权的XGBoost模型应用于雷达信号分类并取得了很好的效果。</p><h3 id="5-基于深度学习的模型"><a href="#5-基于深度学习的模型" class="headerlink" title="5.基于深度学习的模型"></a>5.基于深度学习的模型</h3><p>近年来，深度学习方法在人工智能领域取得了突破性的进展，深度神经网络在图像识别、人脸检测与识别、语音识别、目标捕捉、机器翻译等多个领域都有长足的进步。一方面由于积累的数据量的提高，达到了深度学习所需要的量级，另一方面，机器运算性能的提升，也使深度学习方法有了硬件的基础。深度学习方法可以通过组合浅层次的特征形成更加抽象的高层特征表示，以发现数据的深层次隐含关系，通过多层神经网络的堆叠和激活函数的选取，可以更好地拟合复杂的非线性函数。由于市场规律的复杂性、市场价格的波动性、影响因素的多样性，仅仅依赖传统的策略分析和模型不足以应对这些挑战，而深度学习方法的引入，能够提高对这些问题的解决能力，训练出泛化能力更强的模型，对股票投资来说是具有重要的参考意义。</p><p>由于股价数据具有很强的时间关联性，我们自然想到使用LSTM（Long Short-Term Memory）或者GRU（Gated Recurrent Unit）模型挖掘股价数据在时间上的相关性。同时，中国股票市场受政策面影响很大，经济新闻和上市公司财报等文本数据也会成为股价波动的重要原因。目前研究者们普遍在股价数据的时间序列特征和经济金融信息文本特征两个大方面，使用深度学习模型对其进行预测和分析，也有学者综合以上两种特征，构造既包括技术面参数也包括基本面分析的股价特征向量，输入到模型进行学习，均取得了不错的效果，并有多种模型已经使用到荐股软件或者金融领域中。本文作为综述，只简单的介绍模型以及其基本原理，并期待相关模型能在论文和实验中表现出优秀的性能。</p>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/AI/">AI</category>
      
      
      <comments>http://v2better.top/2024/03/04/DL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LSTM</title>
      <link>http://v2better.top/2024/03/04/LSTM/</link>
      <guid>http://v2better.top/2024/03/04/LSTM/</guid>
      <pubDate>Mon, 04 Mar 2024 07:12:13 GMT</pubDate>
      
        
        
      <description>&lt;h5 id=&quot;LSTM和RNN的区别&quot;&gt;&lt;a href=&quot;#LSTM和RNN的区别&quot; class=&quot;headerlink&quot; title=&quot;LSTM和RNN的区别&quot;&gt;&lt;/a&gt;LSTM和RNN的区别&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;RNN存在的问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h5 id="LSTM和RNN的区别"><a href="#LSTM和RNN的区别" class="headerlink" title="LSTM和RNN的区别"></a>LSTM和RNN的区别</h5><p><strong>RNN存在的问题：</strong></p><p>​    RNN对所有信息全部接收，记忆机制没有重点</p><p>​    RNN中的新信息会强制覆盖旧信息，很久之前的记忆只会占用当前记忆的很小一部分，无法对长期记忆进行有重点的处理</p><p><img src="/img/image-20231231154304823.png" alt="image-20231231154304823" style="zoom: 67%;"></p><p><img src="/img/image-20231231154557924.png" alt="image-20231231154557924" style="zoom:50%;"></p><p>LSTM（右）与RNN的主要区别</p><p><img src="/img/v2-e4f9851cad426dfe4ab1c76209546827_r.png" alt></p><h5 id="LSTM的介绍："><a href="#LSTM的介绍：" class="headerlink" title="LSTM的介绍："></a>LSTM的介绍：</h5><p><img src="/img/image-20240314221601179.png" alt="image-20240314221601179"></p><p><img src="/img/image-20231231154858556.png" alt="image-20231231154858556" style="zoom:50%;"></p><p>​                                                                                                    Memory Cell    </p><p>LSTM依然是一个循环神经网络，LSTM设置了两个关键变量：</p><p>​            · 主要负责记忆短期信息、尤其是当前时间步信息的隐藏状态h</p><p>​            · 主要负责长期记忆的细胞状态C</p><p><img src="/img/image-20231231155329822.png" alt="image-20231231155329822" style="zoom: 50%;"></p><p>Memory Cell细分为：</p><p>​    · 帮助循环网络选择遗忘多少历史信息的<strong>遗忘门</strong>（forget gate）</p><p>​    · 帮助循环网络选择吸纳多少新信息的<strong>输入门</strong>（input gate）</p><p>​    · 帮助循环网络选择出对当前时间步的预测最重要的信息，并将该信息输出给当前时间步的<strong>输出门</strong>（output gate）</p><p>LSTM 逐步解释 </p><p>​        <img src="/img/image-20231231161319580.png" alt="image-20231231161319580"></p><p>forget gate:</p><p>​        其数学本质就是计算一个0~1之间的遗忘比例f_t乘以上一个时间步传入的C_t-1，以此筛选掉部分旧信息。h_t-1是上一个时间步的短期信息，x_t是当前时间步的全部信息，参考h_t-1和x_t并乘以权重W_f，再通过sigmoid函数得到遗忘比例f_t。</p><hr><p><img src="/img/image-20231231162555150.png" alt="image-20231231162555150"></p><p>input gate:</p><p>​        参考h_t-1和x_t生成的筛选新信息的比例i_t，激活函数tanh生成候选信息C~_t，将两者相乘并与C_t-1合并得到新的长期记忆C_t。</p><hr><p><img src="/img/image-20231231163630965.png" alt="image-20231231163630965"></p><p>output gate:</p><p>​        参考h_t-1和x_t生成的一个比例值O_t，结合C_t和O_t生成当前时间步的信息h_t</p><h5 id="LSTM在股票预测中的优势和缺陷"><a href="#LSTM在股票预测中的优势和缺陷" class="headerlink" title="LSTM在股票预测中的优势和缺陷"></a><strong>LSTM在股票预测中的优势和缺陷</strong></h5><p>​    传统的RNN在处理长序列时会面临梯度消失或梯度爆炸的问题，而LSTM通过门控机制（遗忘门、输入门、输出门）可以有效地解决这一问题，从而能够捕捉更长期的依赖关系。</p><p>​    也存在一些缺陷：存在不可避免的滞后</p><p>​    回归算法将使用您提供的时间窗口中的值作为样本，以最大程度地减少误差。假设您正在尝试预测时间t的值。输入是以前的收盘价，即t-20到t-1的最后20个输入的时间序列窗口（假设样本输入的timestep是20）。回归算法可能会学习在时间t-1或t-2处的值作为预测值，因为这样不需要做什么就可以达到优化的误差之内了。这样想：如果在t-1值 6340，那么预测 t时刻为6340或在t + 1时为6340，从整体来看将最大程度地减小误差（因为误差是预测的很多点的误差进行汇总），但是实际上该算法没有学习任何东西，它只是复制，因此除了完成优化任务外，它基本上什么也不做</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>​    特征工程：基于LSTM 的股票预测应用存在滞后性,其原因主要在于输入的数据均为前一天的股票价格数 据.在模型训练过程中发现,当处理这些数据的神经元权重达到很高的水平以后,训练误差会降到很小 的水平,导致训练好的神经网络算法实际上变成了“平移过去的数据”. 因此将当日的开盘价，最高价，最低价也作为数据输入，使得收盘价的权值减小，从而降低预测的滞后性。</p>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/AI/">AI</category>
      
      <category domain="http://v2better.top/tags/python/">python</category>
      
      
      <comments>http://v2better.top/2024/03/04/LSTM/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python学习</title>
      <link>http://v2better.top/2024/02/18/Python%E5%AD%A6%E4%B9%A0/</link>
      <guid>http://v2better.top/2024/02/18/Python%E5%AD%A6%E4%B9%A0/</guid>
      <pubDate>Sun, 18 Feb 2024 12:44:01 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;原始数据类型和运算符&quot;&gt;&lt;a href=&quot;#原始数据类型和运算符&quot; class=&quot;headerlink&quot; title=&quot;原始数据类型和运算符&quot;&gt;&lt;/a&gt;原始数据类型和运算符&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="原始数据类型和运算符"><a href="#原始数据类型和运算符" class="headerlink" title="原始数据类型和运算符"></a>原始数据类型和运算符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整数</span></span><br><span class="line"><span class="number">3</span>  <span class="comment"># =&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 算术没有什么出乎意料的</span></span><br><span class="line"><span class="number">1</span> + <span class="number">1</span>   <span class="comment"># =&gt; 2</span></span><br><span class="line"><span class="number">8</span> - <span class="number">1</span>   <span class="comment"># =&gt; 7</span></span><br><span class="line"><span class="number">10</span> * <span class="number">2</span>  <span class="comment"># =&gt; 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是除法例外，会自动转换成浮点数</span></span><br><span class="line"><span class="number">35</span> / <span class="number">5</span>  <span class="comment"># =&gt; 7.0</span></span><br><span class="line"><span class="number">10.0</span> / <span class="number">3</span>  <span class="comment"># =&gt; 3.3333333333333335</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数除法的结果都是向下取整</span></span><br><span class="line"><span class="number">5</span> // <span class="number">3</span>       <span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="number">5.0</span> // <span class="number">3.0</span>   <span class="comment"># =&gt; 1.0 # 浮点数也可以</span></span><br><span class="line">-<span class="number">5</span> // <span class="number">3</span>      <span class="comment"># =&gt; -2</span></span><br><span class="line">-<span class="number">5.0</span> // <span class="number">3.0</span>  <span class="comment"># =&gt; -2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数的运算结果也是浮点数</span></span><br><span class="line"><span class="number">3</span> * <span class="number">2.0</span> <span class="comment"># =&gt; 6.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模除</span></span><br><span class="line"><span class="number">7</span> % <span class="number">3</span> <span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="comment"># i % j 结果的正负符号会和 j 相同，而不是和 i 相同</span></span><br><span class="line">-<span class="number">7</span> % <span class="number">3</span> <span class="comment"># =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x 的 y 次方</span></span><br><span class="line"><span class="number">2</span>**<span class="number">4</span> <span class="comment"># =&gt; 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用括号决定优先级</span></span><br><span class="line"><span class="number">1</span> + <span class="number">3</span> * <span class="number">2</span>    <span class="comment"># =&gt; 7</span></span><br><span class="line">(<span class="number">1</span> + <span class="number">3</span>) * <span class="number">2</span>  <span class="comment"># =&gt; 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔值 (注意: 首字母大写)</span></span><br><span class="line"><span class="literal">True</span>   <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="literal">False</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 not 取非</span></span><br><span class="line"><span class="keyword">not</span> <span class="literal">True</span>   <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="keyword">not</span> <span class="literal">False</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算符，注意 and 和 or 都是小写</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span> <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># True 和 False 实质上就是数字 1 和0</span></span><br><span class="line"><span class="literal">True</span> + <span class="literal">True</span> <span class="comment"># =&gt; 2</span></span><br><span class="line"><span class="literal">True</span> * <span class="number">8</span>    <span class="comment"># =&gt; 8</span></span><br><span class="line"><span class="literal">False</span> - <span class="number">5</span>   <span class="comment"># =&gt; -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值与 True 和 False 之间的比较运算</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">False</span> <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> == <span class="literal">True</span> <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">True</span> <span class="comment"># =&gt; True</span></span><br><span class="line">-<span class="number">5</span> != <span class="literal">False</span> <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用布尔逻辑运算符对数字类型的值进行运算时，会把数值强制转换为布尔值进行运算</span></span><br><span class="line"><span class="comment"># 但计算结果会返回它们的强制转换前的值</span></span><br><span class="line"><span class="comment"># 注意不要把 bool(ints) 与位运算的 &quot;按位与&quot;、&quot;按位或&quot; (&amp;, |) 混淆</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)     <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">4</span>)     <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="built_in">bool</span>(-<span class="number">6</span>)    <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span>     <span class="comment"># =&gt; 0</span></span><br><span class="line">-<span class="number">5</span> <span class="keyword">or</span> <span class="number">0</span>     <span class="comment"># =&gt; -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用==判断相等</span></span><br><span class="line"><span class="number">1</span> == <span class="number">1</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> == <span class="number">1</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用!=判断不等</span></span><br><span class="line"><span class="number">1</span> != <span class="number">1</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="number">2</span> != <span class="number">1</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较大小</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">10</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">1</span> &gt; <span class="number">10</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="number">2</span> &lt;= <span class="number">2</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> &gt;= <span class="number">2</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断一个值是否在范围里</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">2</span> &lt; <span class="number">3</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> &lt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">3</span> &lt; <span class="number">2</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="comment"># 大小比较可以连起来！</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> &lt; <span class="number">3</span> &lt; <span class="number">2</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (is 对比 ==) is 判断两个变量是否引用同一个对象,</span></span><br><span class="line"><span class="comment"># 而 == 判断两个对象是否含有相同的值</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment"># 变量 a 是一个新的列表, [1, 2, 3, 4]</span></span><br><span class="line">b = a             <span class="comment"># 变量 b 赋值了变量 a 的值</span></span><br><span class="line">b <span class="keyword">is</span> a            <span class="comment"># =&gt; True, a 和 b 引用的是同一个对象</span></span><br><span class="line">b == a            <span class="comment"># =&gt; True, a 和 b 的对象的值相同</span></span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment"># 变量 b 赋值了一个新的列表, [1, 2, 3, 4]</span></span><br><span class="line">b <span class="keyword">is</span> a            <span class="comment"># =&gt; False, a 和 b 引用的不是同一个对象</span></span><br><span class="line">b == a            <span class="comment"># =&gt; True, a 和 b 的对象的值相同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建字符串可以使用单引号（&#x27;）或者双引号（&quot;）</span></span><br><span class="line"><span class="string">&quot;这是个字符串&quot;</span></span><br><span class="line"><span class="string">&#x27;这也是个字符串&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串可以使用加号连接成新的字符串</span></span><br><span class="line"><span class="string">&quot;Hello &quot;</span> + <span class="string">&quot;world!&quot;</span>  <span class="comment"># =&gt; &quot;Hello world!&quot;</span></span><br><span class="line"><span class="comment"># 非变量形式的字符串甚至可以在没有加号的情况下连接</span></span><br><span class="line"><span class="string">&quot;Hello &quot;</span> <span class="string">&quot;world!&quot;</span>    <span class="comment"># =&gt; &quot;Hello world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串可以被当作字符列表</span></span><br><span class="line"><span class="string">&quot;Hello world!&quot;</span>[<span class="number">0</span>]  <span class="comment"># =&gt; &#x27;H&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以获得字符串的长度</span></span><br><span class="line"><span class="built_in">len</span>(<span class="string">&quot;This is a string&quot;</span>)  <span class="comment"># =&gt; 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以使用 f-strings 格式化字符串（python3.6+）</span></span><br><span class="line">name = <span class="string">&quot;Reiko&quot;</span></span><br><span class="line"><span class="string">f&quot;She said her name is <span class="subst">&#123;name&#125;</span>.&quot;</span> <span class="comment"># =&gt; &quot;She said her name is Reiko&quot;</span></span><br><span class="line"><span class="comment"># 你可以在大括号内几乎加入任何 python 表达式，表达式的结果会以字符串的形式返回</span></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123;name&#125;</span> is <span class="subst">&#123;<span class="built_in">len</span>(name)&#125;</span> characters long.&quot;</span> <span class="comment"># =&gt; &quot;Reiko is 5 characters long.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 .format 来格式化字符串</span></span><br><span class="line"><span class="string">&quot;&#123;&#125; can be &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;strings&quot;</span>, <span class="string">&quot;interpolated&quot;</span>)</span><br><span class="line"><span class="comment"># 可以重复参数以节省时间</span></span><br><span class="line"><span class="string">&quot;&#123;0&#125; be nimble, &#123;0&#125; be quick, &#123;0&#125; jump over the &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;candle stick&quot;</span>)</span><br><span class="line"><span class="comment"># =&gt; &quot;Jack be nimble, Jack be quick, Jack jump over the candle stick&quot;</span></span><br><span class="line"><span class="comment"># 如果不想数参数，可以用关键字</span></span><br><span class="line"><span class="string">&quot;&#123;name&#125; wants to eat &#123;food&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;Bob&quot;</span>, food=<span class="string">&quot;lasagna&quot;</span>) </span><br><span class="line"><span class="comment"># =&gt; &quot;Bob wants to eat lasagna&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你的 Python3 程序也要在 Python2.5 以下环境运行，也可以用老式的格式化语法</span></span><br><span class="line"><span class="string">&quot;%s can be %s the %s way&quot;</span> % (<span class="string">&quot;strings&quot;</span>, <span class="string">&quot;interpolated&quot;</span>, <span class="string">&quot;old&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># None是一个对象</span></span><br><span class="line"><span class="literal">None</span>  <span class="comment"># =&gt; None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当与 None 进行比较时不要用 ==，要用 is。is 是用来比较两个变量是否指向同一个对象。</span></span><br><span class="line"><span class="string">&quot;etc&quot;</span> <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="literal">None</span> <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># None，0，空字符串，空列表，空字典，空元组都算是 False</span></span><br><span class="line"><span class="comment"># 所有其他值都是 True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>)  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>([]) <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(&#123;&#125;) <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(()) <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="变量和集合"><a href="#变量和集合" class="headerlink" title="变量和集合"></a>变量和集合</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print是内置的打印函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m Python. Nice to meet you!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，print 函数会在输出结果后加入一个空行作为结尾</span></span><br><span class="line"><span class="comment"># 可以使用附加参数改变输出结尾</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World&quot;</span>, end=<span class="string">&quot;!&quot;</span>)  <span class="comment"># =&gt; Hello, World!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以很简单的从终端获得输入数据</span></span><br><span class="line">input_string_var = <span class="built_in">input</span>(<span class="string">&quot;Enter some data: &quot;</span>) <span class="comment"># 返回字符串数值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在给变量赋值前不用提前声明</span></span><br><span class="line"><span class="comment"># 习惯上变量命名是小写，用下划线分隔单词</span></span><br><span class="line">some_var = <span class="number">5</span></span><br><span class="line">some_var  <span class="comment"># =&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问未赋值的变量会抛出异常</span></span><br><span class="line"><span class="comment"># 参考流程控制一段来学习异常处理</span></span><br><span class="line">some_unknown_var  <span class="comment"># 抛出 NameError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;if&quot; 可以用作表达式，它的作用等同于 C 语言的三元运算符 &quot;?:&quot;</span></span><br><span class="line"><span class="string">&quot;yay!&quot;</span> <span class="keyword">if</span> <span class="number">0</span> &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;nay!&quot;</span>  <span class="comment"># =&gt; &quot;nay!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用列表 (list) 储存序列</span></span><br><span class="line">li = []</span><br><span class="line"><span class="comment"># 创建列表时也可以同时赋给元素</span></span><br><span class="line">other_li = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用append在列表最后追加元素</span></span><br><span class="line">li.append(<span class="number">1</span>)    <span class="comment"># li现在是[1]</span></span><br><span class="line">li.append(<span class="number">2</span>)    <span class="comment"># li现在是[1, 2]</span></span><br><span class="line">li.append(<span class="number">4</span>)    <span class="comment"># li现在是[1, 2, 4]</span></span><br><span class="line">li.append(<span class="number">3</span>)    <span class="comment"># li现在是[1, 2, 4, 3]</span></span><br><span class="line"><span class="comment"># 用pop从列表尾部删除</span></span><br><span class="line">li.pop()        <span class="comment"># =&gt; 3 且li现在是[1, 2, 4]</span></span><br><span class="line"><span class="comment"># 把3再放回去</span></span><br><span class="line">li.append(<span class="number">3</span>)    <span class="comment"># li变回[1, 2, 4, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表存取跟数组一样</span></span><br><span class="line">li[<span class="number">0</span>]  <span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="comment"># 取出最后一个元素</span></span><br><span class="line">li[-<span class="number">1</span>]  <span class="comment"># =&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 越界存取会造成 IndexError</span></span><br><span class="line">li[<span class="number">4</span>]  <span class="comment"># 抛出 IndexError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表有切割语法</span></span><br><span class="line">li[<span class="number">1</span>:<span class="number">3</span>]    <span class="comment"># =&gt; [2, 4]</span></span><br><span class="line"><span class="comment"># 取尾</span></span><br><span class="line">li[<span class="number">2</span>:]     <span class="comment"># =&gt; [4, 3]</span></span><br><span class="line"><span class="comment"># 取头</span></span><br><span class="line">li[:<span class="number">3</span>]     <span class="comment"># =&gt; [1, 2, 4]</span></span><br><span class="line"><span class="comment"># 隔一个取一个</span></span><br><span class="line">li[::<span class="number">2</span>]    <span class="comment"># =&gt;[1, 4]</span></span><br><span class="line"><span class="comment"># 倒排列表</span></span><br><span class="line">li[::-<span class="number">1</span>]   <span class="comment"># =&gt; [3, 4, 2, 1]</span></span><br><span class="line"><span class="comment"># 可以用三个参数的任何组合来构建切割</span></span><br><span class="line"><span class="comment"># li[始:终:步伐]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单的实现了单层数组的深度复制</span></span><br><span class="line">li2 = li[:]  <span class="comment"># =&gt; li2 = [1, 2, 4, 3] ，但 (li2 is li) 会返回 False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 del 删除任何一个元素</span></span><br><span class="line"><span class="keyword">del</span> li[<span class="number">2</span>]   <span class="comment"># li 现在为 [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除第一个匹配的元素</span></span><br><span class="line">li.remove(<span class="number">2</span>)  <span class="comment"># li 现在为 [1, 3]</span></span><br><span class="line">li.remove(<span class="number">2</span>)  <span class="comment"># 抛出错误 ValueError: 2 is not in the list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定索引处插入一个新的元素</span></span><br><span class="line">li.insert(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># li is now [1, 2, 3] again</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得列表第一个匹配的值的索引</span></span><br><span class="line">li.index(<span class="number">2</span>)  <span class="comment"># =&gt; 1</span></span><br><span class="line">li.index(<span class="number">4</span>)  <span class="comment"># 抛出一个 ValueError: 4 is not in the list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表可以相加</span></span><br><span class="line"><span class="comment"># 注意：li 和 other_li 的值都不变</span></span><br><span class="line">li + other_li   <span class="comment"># =&gt; [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 &quot;extend()&quot; 拼接列表</span></span><br><span class="line">li.extend(other_li)   <span class="comment"># li 现在是[1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 &quot;in&quot; 测试列表是否包含值</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> li   <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 &quot;len()&quot; 取列表长度</span></span><br><span class="line"><span class="built_in">len</span>(li)   <span class="comment"># =&gt; 6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组类似列表，但是不允许修改</span></span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tup[<span class="number">0</span>]   <span class="comment"># =&gt; 1</span></span><br><span class="line">tup[<span class="number">0</span>] = <span class="number">3</span>  <span class="comment"># 抛出 TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果元素数量为 1 的元组必须在元素之后加一个逗号</span></span><br><span class="line"><span class="comment"># 其他元素数量的元组，包括空元组，都不需要</span></span><br><span class="line"><span class="built_in">type</span>((<span class="number">1</span>))   <span class="comment"># =&gt; &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">type</span>((<span class="number">1</span>,))  <span class="comment"># =&gt; &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">type</span>(())    <span class="comment"># =&gt; &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表允许的操作元组大多都可以</span></span><br><span class="line"><span class="built_in">len</span>(tup)   <span class="comment"># =&gt; 3</span></span><br><span class="line">tup + (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)   <span class="comment"># =&gt; (1, 2, 3, 4, 5, 6)</span></span><br><span class="line">tup[:<span class="number">2</span>]   <span class="comment"># =&gt; (1, 2)</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">in</span> tup   <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把元组合列表解包，赋值给变量</span></span><br><span class="line">a, b, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)     <span class="comment"># 现在 a 是 1，b 是 2，c 是 3</span></span><br><span class="line"><span class="comment"># 也可以做扩展解包</span></span><br><span class="line">a, *b, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 现在 a 是 1, b 是 [2, 3]， c 是 4</span></span><br><span class="line"><span class="comment"># 元组周围的括号是可以省略的</span></span><br><span class="line">d, e, f = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> <span class="comment"># 元组 4, 5, 6 通过解包被赋值给变量 d, e, f</span></span><br><span class="line"><span class="comment"># 交换两个变量的值就这么简单</span></span><br><span class="line">e, d = d, e     <span class="comment"># 现在 d 是 5，e 是 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典用来存储 key 到 value 的映射关系</span></span><br><span class="line">empty_dict = &#123;&#125;</span><br><span class="line"><span class="comment"># 初始化的字典</span></span><br><span class="line">filled_dict = &#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>, <span class="string">&quot;three&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典的 key 必须为不可变类型。 这是为了确保 key 被转换为唯一的哈希值以用于快速查询</span></span><br><span class="line"><span class="comment"># 不可变类型包括整数、浮点、字符串、元组</span></span><br><span class="line">invalid_dict = &#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]: <span class="string">&quot;123&quot;</span>&#125;  <span class="comment"># =&gt; 抛出 TypeError: unhashable type: &#x27;list&#x27;</span></span><br><span class="line">valid_dict = &#123;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;   <span class="comment"># 然而 value 可以是任何类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用[]取值</span></span><br><span class="line">filled_dict[<span class="string">&quot;one&quot;</span>]   <span class="comment"># =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 keys 获得所有的键。</span></span><br><span class="line"><span class="comment"># 因为 keys 返回一个可迭代对象，所以我们需要把它包在 &quot;list()&quot; 里才能转换为列表。</span></span><br><span class="line"><span class="comment"># 我们下面会详细介绍可迭代。</span></span><br><span class="line"><span class="comment"># 注意: 对于版本 &lt; 3.7 的 python, 字典的 key 的排序是无序的。你的运行结果</span></span><br><span class="line"><span class="comment"># 可能与下面的例子不符，但是在 3.7 版本，字典中的项会按照他们被插入到字典的顺序进行排序</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.keys())  <span class="comment"># =&gt; [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;] Python 版本 &lt;3.7</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.keys())  <span class="comment"># =&gt; [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;] Python 版本 3.7+</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 &quot;values()&quot; 获得所有的值。跟 keys 一样也是可迭代对象，要使用 &quot;list()&quot; 才能转换为列表。</span></span><br><span class="line"><span class="comment"># 注意: 排序顺序和 keys 的情况相同。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(filled_dict.values())  <span class="comment"># =&gt; [3, 2, 1] Python 版本 &lt; 3.7</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.values())  <span class="comment"># =&gt; [1, 2, 3] Python 版本 3.7+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用in测试一个字典是否包含一个键</span></span><br><span class="line"><span class="string">&quot;one&quot;</span> <span class="keyword">in</span> filled_dict   <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> filled_dict   <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问不存在的键会导致 KeyError</span></span><br><span class="line">filled_dict[<span class="string">&quot;four&quot;</span>]   <span class="comment"># KeyError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 &quot;get()&quot; 来避免KeyError</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;one&quot;</span>)      <span class="comment"># =&gt; 1</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;four&quot;</span>)     <span class="comment"># =&gt; None</span></span><br><span class="line"><span class="comment"># 当键不存在的时候 &quot;get()&quot; 方法可以返回默认值</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;one&quot;</span>, <span class="number">4</span>)   <span class="comment"># =&gt; 1</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;four&quot;</span>, <span class="number">4</span>)  <span class="comment"># =&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;setdefault()&quot; 方法只有当键不存在的时候插入新值</span></span><br><span class="line">filled_dict.setdefault(<span class="string">&quot;five&quot;</span>, <span class="number">5</span>)  <span class="comment"># filled_dict[&quot;five&quot;] 设为5</span></span><br><span class="line">filled_dict.setdefault(<span class="string">&quot;five&quot;</span>, <span class="number">6</span>)  <span class="comment"># filled_dict[&quot;five&quot;] 还是5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典赋值</span></span><br><span class="line">filled_dict.update(&#123;<span class="string">&quot;four&quot;</span>:<span class="number">4</span>&#125;) <span class="comment"># =&gt; &#123;&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3, &quot;four&quot;: 4&#125;</span></span><br><span class="line">filled_dict[<span class="string">&quot;four&quot;</span>] = <span class="number">4</span>        <span class="comment"># 另一种赋值方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 del 删除项</span></span><br><span class="line"><span class="keyword">del</span> filled_dict[<span class="string">&quot;one&quot;</span>]  <span class="comment"># 从 filled_dict 中把 one 删除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 set 表达集合</span></span><br><span class="line">empty_set = <span class="built_in">set</span>()</span><br><span class="line"><span class="comment"># 初始化一个集合，语法跟字典相似。</span></span><br><span class="line">some_set = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;   <span class="comment"># some_set现在是 &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似字典的 keys，set 的元素也必须是不可变类型</span></span><br><span class="line">invalid_set = &#123;[<span class="number">1</span>], <span class="number">1</span>&#125;  <span class="comment"># =&gt; Raises a TypeError: unhashable type: &#x27;list&#x27;</span></span><br><span class="line">valid_set = &#123;(<span class="number">1</span>,), <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把集合赋值于变量</span></span><br><span class="line">filled_set = some_set</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为集合添加元素</span></span><br><span class="line">filled_set.add(<span class="number">5</span>)   <span class="comment"># filled_set 现在是 &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># set 没有重复的元素</span></span><br><span class="line">filled_set.add(<span class="number">5</span>)   <span class="comment"># filled_set 依然是 &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;&amp;&quot; 取交集</span></span><br><span class="line">other_set = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">filled_set &amp; other_set   <span class="comment"># =&gt; &#123;3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;|&quot; 取并集</span></span><br><span class="line">filled_set | other_set   <span class="comment"># =&gt; &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;-&quot; 取补集</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; - &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;   <span class="comment"># =&gt; &#123;1, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;^&quot; 取异或集（对称差）</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; ^ &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;  <span class="comment"># =&gt; &#123;1, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断左边的集合是否是右边集合的超集</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; &gt;= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断左边的集合是否是右边集合的子集</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; &lt;= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in 测试集合是否包含元素</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">in</span> filled_set   <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">in</span> filled_set   <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单层集合的深度复制</span></span><br><span class="line">filled_set = some_set.copy()  <span class="comment"># filled_set 是 &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line">filled_set <span class="keyword">is</span> some_set        <span class="comment"># =&gt; False</span></span><br></pre></td></tr></table></figure><h1 id="流程控制和迭代器"><a href="#流程控制和迭代器" class="headerlink" title="流程控制和迭代器"></a>流程控制和迭代器</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先随便定义一个变量</span></span><br><span class="line">some_var = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是个if语句。注意缩进在Python里是有意义的！</span></span><br><span class="line"><span class="comment"># 缩进要使用 4 个空格而不是 tabs。</span></span><br><span class="line"><span class="comment"># 这段代码会打印 &quot;some_var is smaller than 10&quot;</span></span><br><span class="line"><span class="keyword">if</span> some_var &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;some_var is totally bigger than 10.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> some_var &lt; <span class="number">10</span>:    <span class="comment"># elif 语句是可选的</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;some_var is smaller than 10.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:                  <span class="comment"># else 也是可选的</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;some_var is indeed 10.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用 for 循环语句遍历列表</span></span><br><span class="line"><span class="string">打印:</span></span><br><span class="line"><span class="string">    dog is a mammal</span></span><br><span class="line"><span class="string">    cat is a mammal</span></span><br><span class="line"><span class="string">    mouse is a mammal</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> [<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;mouse&quot;</span>]:</span><br><span class="line">    <span class="comment"># 你可以使用 format() 格式化字符串并插入值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; is a mammal&quot;</span>.<span class="built_in">format</span>(animal))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;range(number)&quot; 返回数字列表从 0 到 number 的数字</span></span><br><span class="line"><span class="string">打印:</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;range(lower, upper)&quot; 会返回一个包含从 lower 到 upper 的数字迭代器</span></span><br><span class="line"><span class="string">prints:</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;range(lower, upper, step)&quot; 会返回一个，从 lower 到 upper、并且间隔值为 step 的迭代器。</span></span><br><span class="line"><span class="string">如果 step 未传入则会使用默认值 1</span></span><br><span class="line"><span class="string">prints:</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">遍历列表，并且同时返回列表里的每一个元素的索引和数值。</span></span><br><span class="line"><span class="string">prints:</span></span><br><span class="line"><span class="string">    0 dog</span></span><br><span class="line"><span class="string">    1 cat</span></span><br><span class="line"><span class="string">    2 mouse</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">animals = [<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;mouse&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(animals):</span><br><span class="line">    <span class="built_in">print</span>(i, value)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">while 循环直到条件不满足</span></span><br><span class="line"><span class="string">打印:</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x += <span class="number">1</span>  <span class="comment"># x = x + 1 的简写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 try/except 块处理异常状况</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 用 raise 抛出异常</span></span><br><span class="line">    <span class="keyword">raise</span> IndexError(<span class="string">&quot;This is an index error&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span>                             <span class="comment"># pass 是无操作，但是应该在这里处理错误</span></span><br><span class="line"><span class="keyword">except</span> (TypeError, NameError):</span><br><span class="line">    <span class="keyword">pass</span>                             <span class="comment"># 可以同时处理不同类的错误</span></span><br><span class="line"><span class="keyword">else</span>:                    <span class="comment"># else语句是可选的，必须在所有的except之后</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All good!&quot;</span>)   <span class="comment"># 只有当try运行完没有错误的时候这句才会运行</span></span><br><span class="line"><span class="keyword">finally</span>:                                 <span class="comment"># 在任何情况下都会执行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We can clean up resources here&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以使用 with 语句来代替 try/finally 对操作进行结束的操作</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">contents = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">12</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">21</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile1.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(contents))        <span class="comment"># 写入字符串到文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile2.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(contents)) <span class="comment"># 写入对象到文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading from a file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile1.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    contents = file.read()           <span class="comment"># 从文件读取字符串</span></span><br><span class="line"><span class="built_in">print</span>(contents)</span><br><span class="line"><span class="comment"># print: &#123;&quot;aa&quot;: 12, &quot;bb&quot;: 21&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile2.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    contents = json.load(file)       <span class="comment"># 从文件读取 json 对象</span></span><br><span class="line"><span class="built_in">print</span>(contents)</span><br><span class="line"><span class="comment"># print: &#123;&quot;aa&quot;: 12, &quot;bb&quot;: 21&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows 环境调用 open() 读取文件的默认编码为 ANSI，如果需要读取 utf-8 编码的文件，</span></span><br><span class="line"><span class="comment"># 需要指定 encoding 参数:</span></span><br><span class="line"><span class="comment"># open(&quot;myfile3.txt&quot;, &quot;r+&quot;, encoding = &quot;utf-8&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 提供一个叫做可迭代 (iterable) 的基本抽象。一个可迭代对象是可以被当作序列</span></span><br><span class="line"><span class="comment"># 的对象。比如说上面 range 返回的对象就是可迭代的。</span></span><br><span class="line"></span><br><span class="line">filled_dict = &#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>, <span class="string">&quot;three&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line">our_iterable = filled_dict.keys()</span><br><span class="line"><span class="built_in">print</span>(our_iterable) <span class="comment"># =&gt; dict_keys([&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;])，是一个实现可迭代接口的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可迭代对象可以遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> our_iterable:</span><br><span class="line">    <span class="built_in">print</span>(i)    <span class="comment"># 打印 one, two, three</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是不可以随机访问</span></span><br><span class="line">our_iterable[<span class="number">1</span>]  <span class="comment"># 抛出TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可迭代对象知道怎么生成迭代器</span></span><br><span class="line">our_iterator = <span class="built_in">iter</span>(our_iterable)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代器是一个可以记住遍历的位置的对象</span></span><br><span class="line"><span class="comment"># 用 &quot;next()&quot; 获得下一个对象</span></span><br><span class="line"><span class="built_in">next</span>(our_iterator)  <span class="comment"># =&gt; &quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再一次调取 &quot;next()&quot; 时会记得位置</span></span><br><span class="line"><span class="built_in">next</span>(our_iterator)  <span class="comment"># =&gt; &quot;two&quot;</span></span><br><span class="line"><span class="built_in">next</span>(our_iterator)  <span class="comment"># =&gt; &quot;three&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当迭代器所有元素都取出后，会抛出 StopIteration</span></span><br><span class="line"><span class="built_in">next</span>(our_iterator) <span class="comment"># 抛出 StopIteration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们还可以通过遍历访问所有的值，实际上，for 内部实现了迭代</span></span><br><span class="line">our_iterator = <span class="built_in">iter</span>(our_iterable)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> our_iterator:</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 依次打印 one, two, three</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用 list 一次取出迭代器或者可迭代对象所有的元素</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.keys())  <span class="comment"># =&gt; 返回 [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line"><span class="built_in">list</span>(our_iterator)  <span class="comment"># =&gt; 返回 [] 因为迭代的位置被保存了</span></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用def定义新函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is &#123;&#125; and y is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x, y))</span><br><span class="line">    <span class="keyword">return</span> x + y    <span class="comment"># 用 return 语句返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">add(<span class="number">5</span>, <span class="number">6</span>)   <span class="comment"># =&gt; 打印 &quot;x is 5 and y is 6&quot; 并且返回 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用关键字参数来调用函数</span></span><br><span class="line">add(y=<span class="number">6</span>, x=<span class="number">5</span>)   <span class="comment"># 关键字参数可以用任何顺序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们可以定义一个可变参数函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">varargs</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line">varargs(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)   <span class="comment"># =&gt; (1, 2, 3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们也可以定义一个关键字可变参数函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keyword_args</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> kwargs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们来看看结果是什么：</span></span><br><span class="line">keyword_args(big=<span class="string">&quot;foot&quot;</span>, loch=<span class="string">&quot;ness&quot;</span>)   <span class="comment"># =&gt; &#123;&quot;big&quot;: &quot;foot&quot;, &quot;loch&quot;: &quot;ness&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两种可变参数可以混着用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_the_args</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">all_the_args(1, 2, a=3, b=4) prints:</span></span><br><span class="line"><span class="string">    (1, 2)</span></span><br><span class="line"><span class="string">    &#123;&quot;a&quot;: 3, &quot;b&quot;: 4&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用可变参数函数时可以做跟上面相反的，用 * 展开元组，用 ** 展开字典。</span></span><br><span class="line">args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kwargs = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">3</span>, <span class="string">&quot;b&quot;</span>: <span class="number">4</span>&#125;</span><br><span class="line">all_the_args(*args)   <span class="comment"># 相当于 all_the_args(1, 2, 3, 4)</span></span><br><span class="line">all_the_args(**kwargs)   <span class="comment"># 相当于 all_the_args(a=3, b=4)</span></span><br><span class="line">all_the_args(*args, **kwargs)   <span class="comment"># 相当于 all_the_args(1, 2, 3, 4, a=3, b=4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用返回多个数值（返回值为元组类型）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> y, x  <span class="comment"># 用不带括号的元组的格式来返回多个数值</span></span><br><span class="line">                 <span class="comment"># (注意: 括号不需要加，但是也可以加)</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">x, y = swap(x, y)     <span class="comment"># =&gt; x = 2, y = 1</span></span><br><span class="line"><span class="comment"># (x, y) = swap(x,y)  # 同上，括号不需要加，但是也可以加</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数作用域</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setX</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="comment"># 局部作用域的 x 和全局域的 x 是不同的</span></span><br><span class="line">    x = num <span class="comment"># =&gt; 43</span></span><br><span class="line">    <span class="built_in">print</span> (x) <span class="comment"># =&gt; 43</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setGlobalX</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="built_in">print</span> (x) <span class="comment"># =&gt; 5</span></span><br><span class="line">    x = num   <span class="comment"># 现在全局域的 x 被赋值</span></span><br><span class="line">    <span class="built_in">print</span> (x) <span class="comment"># =&gt; 6</span></span><br><span class="line"></span><br><span class="line">setX(<span class="number">43</span>)</span><br><span class="line">setGlobalX(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数在 Python 是一等公民</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_adder</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line">add_10 = create_adder(<span class="number">10</span>)</span><br><span class="line">add_10(<span class="number">3</span>)   <span class="comment"># =&gt; 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也有匿名函数</span></span><br><span class="line">(<span class="keyword">lambda</span> x: x &gt; <span class="number">2</span>)(<span class="number">3</span>)                  <span class="comment"># =&gt; True</span></span><br><span class="line">(<span class="keyword">lambda</span> x, y: x ** <span class="number">2</span> + y ** <span class="number">2</span>)(<span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># =&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置的高阶函数</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(add_10, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))          <span class="comment"># =&gt; [11, 12, 13]</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">max</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]))  <span class="comment"># =&gt; [4, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]))  <span class="comment"># =&gt; [6, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用列表推导式可以简化映射和过滤。列表推导式的返回值是另一个列表。</span></span><br><span class="line">[add_10(i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]  <span class="comment"># =&gt; [11, 12, 13]</span></span><br><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] <span class="keyword">if</span> x &gt; <span class="number">5</span>]   <span class="comment"># =&gt; [6, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你也可以用这种方式实现对集合和字典的构建</span></span><br><span class="line">&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abcddeef&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;  <span class="comment"># =&gt; &#123;&#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;&#125;</span></span><br><span class="line">&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)&#125;  <span class="comment"># =&gt; &#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">16</span>))  <span class="comment"># =&gt; 4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以导入模块中具体的函数</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil, floor</span><br><span class="line"><span class="built_in">print</span>(ceil(<span class="number">3.7</span>))   <span class="comment"># =&gt; 4.0</span></span><br><span class="line"><span class="built_in">print</span>(floor(<span class="number">3.7</span>))  <span class="comment"># =&gt; 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以导入模块中的所有的函数</span></span><br><span class="line"><span class="comment"># 警告: 此操作不推荐</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以对模块名进行简化</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line">math.sqrt(<span class="number">16</span>) == m.sqrt(<span class="number">16</span>)  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 模块实质上是 Python 文件</span></span><br><span class="line"><span class="comment"># 你可以自己编写自己的模块，然后导入</span></span><br><span class="line"><span class="comment"># 模块的名称和文件名相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以用 &quot;dir()&quot; 查看模块中定义的函数和字段</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">dir</span>(math)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当你的脚本文件所在的文件夹也包含了一个名为 math.py 的 Python 文件</span></span><br><span class="line"><span class="comment"># 这个 math.py 文件会被代替引入，而不是引入 Python 內建模块中的 math</span></span><br><span class="line"><span class="comment"># 出现这个情况的原因是本地文件夹的引入优先级要比 Python 內建库引入优先级要高</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们使用 &quot;class&quot; 语句来创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一个类的字段。 这个字段共享给这个类的所有实例。</span></span><br><span class="line">    species = <span class="string">&quot;H. sapiens&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造方法，当实例被初始化时被调用。注意名字前后的双下划线，这是表明这个属性</span></span><br><span class="line">    <span class="comment"># 或方法对 Python 有特殊意义，但是允许用户自行定义。</span></span><br><span class="line">    <span class="comment"># 方法(可能是对象或者属性) 类似: __init__, __str__,__repr__ etc</span></span><br><span class="line">    <span class="comment"># 都是特殊的方法</span></span><br><span class="line">    <span class="comment"># 你自己取名时不应该用这种格式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="comment"># 将参数赋值给实例的 name 字段</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化属性</span></span><br><span class="line">        self._age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法，第一个参数总是self，也就是这个实例对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;name&#125;: &#123;message&#125;&quot;</span>.<span class="built_in">format</span>(name=self.name, message=msg))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 另一个实例方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;yo... yo... microphone check... one two... one two...&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法，被所有此类的实例共用。</span></span><br><span class="line">    <span class="comment"># 第一个参数是这个类对象。</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_species</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.species</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法。调用时没有实例或类的绑定。</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grunt</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;*grunt*&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># property 有点类似 getter</span></span><br><span class="line">    <span class="comment"># 它把方法 age() 转换为同名并且只读的属性</span></span><br><span class="line">    <span class="comment"># 通常情况下，可以不需要编写复杂的 getter 和 setter。</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 允许属性被修改</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 允许属性被删除</span></span><br><span class="line"><span class="meta">    @age.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">del</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 Python 解释器在读取源文件的时候，就会执行文件中所有的代码</span></span><br><span class="line"><span class="comment"># 对 __name__ 的检查可以保证这块代码只会在这个模块是主程序的情况下被运行（而不是在引用时运行）</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    i = Human(name=<span class="string">&quot;Ian&quot;</span>)</span><br><span class="line">    i.say(<span class="string">&quot;hi&quot;</span>)                     <span class="comment"># &quot;Ian: hi&quot;</span></span><br><span class="line">    j = Human(<span class="string">&quot;Joel&quot;</span>)</span><br><span class="line">    j.say(<span class="string">&quot;hello&quot;</span>)                  <span class="comment"># &quot;Joel: hello&quot;</span></span><br><span class="line">    <span class="comment"># i 和 j 都是 Human 实例化后的对象，换一句话说，它们都是 Human 实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行类方法 (classmethod)</span></span><br><span class="line">    i.say(i.get_species())          <span class="comment"># &quot;Ian: H. sapiens&quot;</span></span><br><span class="line">    <span class="comment"># 修改共享的类属性</span></span><br><span class="line">    Human.species = <span class="string">&quot;H. neanderthalensis&quot;</span></span><br><span class="line">    i.say(i.get_species())          <span class="comment"># =&gt; &quot;Ian: H. neanderthalensis&quot;</span></span><br><span class="line">    j.say(j.get_species())          <span class="comment"># =&gt; &quot;Joel: H. neanderthalensis&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行静态方法 (staticmethod)</span></span><br><span class="line">    <span class="built_in">print</span>(Human.grunt())            <span class="comment"># =&gt; &quot;*grunt*&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例上也可以执行静态方法</span></span><br><span class="line">    <span class="built_in">print</span>(i.grunt())                <span class="comment"># =&gt; &quot;*grunt*&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新实例的属性</span></span><br><span class="line">    i.age = <span class="number">42</span></span><br><span class="line">    <span class="comment"># 访问实例的属性</span></span><br><span class="line">    i.say(i.age)                    <span class="comment"># =&gt; &quot;Ian: 42&quot;</span></span><br><span class="line">    j.say(j.age)                    <span class="comment"># =&gt; &quot;Joel: 0&quot;</span></span><br><span class="line">    <span class="comment"># 删除实例的属性</span></span><br><span class="line">    <span class="keyword">del</span> i.age</span><br><span class="line">    <span class="comment"># i.age                         # =&gt; 这会抛出一个错误: AttributeError</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 继承机制允许子类可以继承父类上的方法和变量。</span></span><br><span class="line"><span class="comment"># 我们可以把 Human 类作为一个基础类或者说叫做父类，</span></span><br><span class="line"><span class="comment"># 然后定义一个名为 Superhero 的子类来继承父类上的比如 &quot;species&quot;、 &quot;name&quot;、 &quot;age&quot; 的属性</span></span><br><span class="line"><span class="comment"># 和比如 &quot;sing&quot; 、&quot;grunt&quot; 这样的方法，同时，也可以定义它自己独有的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于 Python 文件模块化的特点，你可以把这个类放在独立的文件中，比如说，human.py。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要从别的文件导入函数，需要使用以下的语句</span></span><br><span class="line"><span class="comment"># from &quot;filename-without-extension&quot; import &quot;function-or-class&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> human <span class="keyword">import</span> Human</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定父类作为类初始化的参数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Superhero</span>(<span class="title class_ inherited__">Human</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果子类需要继承所有父类的定义，并且不需要做任何的修改，</span></span><br><span class="line">    <span class="comment"># 你可以直接使用 &quot;pass&quot; 关键字（并且不需要其他任何语句）</span></span><br><span class="line">    <span class="comment"># 但是在这个例子中会被注释掉，以用来生成不一样的子类。</span></span><br><span class="line">    <span class="comment"># pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子类可以重写父类定义的字段</span></span><br><span class="line">    species = <span class="string">&#x27;Superhuman&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子类会自动的继承父类的构造函数包括它的参数，但同时，子类也可以新增额外的参数或者定义，</span></span><br><span class="line">    <span class="comment"># 甚至去覆盖父类的方法比如说构造函数。</span></span><br><span class="line">    <span class="comment"># 这个构造函数从父类 &quot;Human&quot; 上继承了 &quot;name&quot; 参数，同时又新增了 &quot;superpower&quot; 和</span></span><br><span class="line">    <span class="comment"># &quot;movie&quot; 参数:</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, movie=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                 superpowers=[<span class="string">&quot;super strength&quot;</span>, <span class="string">&quot;bulletproofing&quot;</span>]</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 新增额外类的参数</span></span><br><span class="line">        self.fictional = <span class="literal">True</span></span><br><span class="line">        self.movie = movie</span><br><span class="line">        <span class="comment"># 注意可变的默认值，因为默认值是共享的</span></span><br><span class="line">        self.superpowers = superpowers</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &quot;super&quot; 函数让你可以访问父类中被子类重写的方法</span></span><br><span class="line">        <span class="comment"># 在这个例子中，被重写的是 __init__ 方法</span></span><br><span class="line">        <span class="comment"># 这个语句是用来运行父类的构造函数:</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类中的 sing 方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Dun, dun, DUN!&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增一个额外的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">boast</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> power <span class="keyword">in</span> self.superpowers:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;I wield the power of &#123;pow&#125;!&quot;</span>.<span class="built_in">format</span>(<span class="built_in">pow</span>=power))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sup = Superhero(name=<span class="string">&quot;Tick&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查实例类型</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(sup, Human):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am human&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(sup) <span class="keyword">is</span> Superhero:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am a superhero&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取方法解析顺序 MRO，MRO 被用于 getattr() 和 super()</span></span><br><span class="line">    <span class="comment"># 这个字段是动态的，并且可以被修改</span></span><br><span class="line">    <span class="built_in">print</span>(Superhero.__mro__)    <span class="comment"># =&gt; (&lt;class &#x27;__main__.Superhero&#x27;&gt;,</span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class &#x27;human.Human&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用父类的方法并且使用子类的属性</span></span><br><span class="line">    <span class="built_in">print</span>(sup.get_species())    <span class="comment"># =&gt; Superhuman</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用被重写的方法</span></span><br><span class="line">    <span class="built_in">print</span>(sup.sing())           <span class="comment"># =&gt; Dun, dun, DUN!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用 Human 的方法</span></span><br><span class="line">    sup.say(<span class="string">&#x27;Spoon&#x27;</span>)            <span class="comment"># =&gt; Tick: Spoon</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用 Superhero 独有的方法</span></span><br><span class="line">    sup.boast()                 <span class="comment"># =&gt; I wield the power of super strength!</span></span><br><span class="line">                                <span class="comment"># =&gt; I wield the power of bulletproofing!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 继承类的字段</span></span><br><span class="line">    sup.age = <span class="number">31</span></span><br><span class="line">    <span class="built_in">print</span>(sup.age)              <span class="comment"># =&gt; 31</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Superhero 独有的字段</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Am I Oscar eligible? &#x27;</span> + <span class="built_in">str</span>(sup.movie))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 定义另一个类</span></span><br><span class="line"><span class="comment"># bat.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bat</span>:</span><br><span class="line"></span><br><span class="line">    species = <span class="string">&#x27;Baty&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, can_fly=<span class="literal">True</span></span>):</span><br><span class="line">        self.fly = can_fly</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这个类同样有 say 的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self, msg</span>):</span><br><span class="line">        msg = <span class="string">&#x27;... ... ...&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增一个独有的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sonar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;))) ... (((&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    b = Bat()</span><br><span class="line">    <span class="built_in">print</span>(b.say(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(b.fly)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们来定义一个类来同时继承 Superhero 和 Bat</span></span><br><span class="line"><span class="comment"># superhero.py</span></span><br><span class="line"><span class="keyword">from</span> superhero <span class="keyword">import</span> Superhero</span><br><span class="line"><span class="keyword">from</span> bat <span class="keyword">import</span> Bat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 Batman 作为子类，来同时继承 SuperHero 和 Bat</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Batman</span>(Superhero, Bat):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 通常要继承属性，你必须调用 super:</span></span><br><span class="line">        <span class="comment"># super(Batman, self).__init__(*args, **kwargs)</span></span><br><span class="line">        <span class="comment"># 然而在这里我们处理的是多重继承，而 super() 只会返回 MRO 列表的下一个基础类。</span></span><br><span class="line">        <span class="comment"># 因此，我们需要显式调用初始类的 __init__</span></span><br><span class="line">        <span class="comment"># *args 和 **kwargs 传递参数时更加清晰整洁，而对于父类而言像是 “剥了一层洋葱”</span></span><br><span class="line">        Superhero.__init__(self, <span class="string">&#x27;anonymous&#x27;</span>, movie=<span class="literal">True</span>,</span><br><span class="line">                           superpowers=[<span class="string">&#x27;Wealthy&#x27;</span>], *args, **kwargs)</span><br><span class="line">        Bat.__init__(self, *args, can_fly=<span class="literal">False</span>, **kwargs)</span><br><span class="line">        <span class="comment"># 重写了 name 字段</span></span><br><span class="line">        self.name = <span class="string">&#x27;Sad Affleck&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;nan nan nan nan nan batman!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sup = Batman()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取方法解析顺序 MRO，MRO 被用于 getattr() 和 super()</span></span><br><span class="line">    <span class="comment"># 这个字段是动态的，并且可以被修改</span></span><br><span class="line">    <span class="built_in">print</span>(Batman.__mro__)       <span class="comment"># =&gt; (&lt;class &#x27;__main__.Batman&#x27;&gt;,</span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class &#x27;superhero.Superhero&#x27;&gt;,</span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class &#x27;human.Human&#x27;&gt;,</span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class &#x27;bat.Bat&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用父类的方法并且使用子类的属性</span></span><br><span class="line">    <span class="built_in">print</span>(sup.get_species())    <span class="comment"># =&gt; Superhuman</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用被重写的类</span></span><br><span class="line">    <span class="built_in">print</span>(sup.sing())           <span class="comment"># =&gt; nan nan nan nan nan batman!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用 Human 上的方法，(之所以是 Human 而不是 Bat)，是因为继承顺序起了作用</span></span><br><span class="line">    sup.say(<span class="string">&#x27;I agree&#x27;</span>)          <span class="comment"># =&gt; Sad Affleck: I agree</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用仅存在于第二个继承的父类的方法</span></span><br><span class="line">    <span class="built_in">print</span>(sup.sonar())          <span class="comment"># =&gt; ))) ... (((</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 继承类的属性</span></span><br><span class="line">    sup.age = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(sup.age)              <span class="comment"># =&gt; 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从第二个类上继承字段，并且其默认值被重写</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Can I fly? &#x27;</span> + <span class="built_in">str</span>(sup.fly)) <span class="comment"># =&gt; Can I fly? False</span></span><br></pre></td></tr></table></figure><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 用生成器(generators)方便地写惰性运算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double_numbers</span>(<span class="params">iterable</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> i + i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器只有在需要时才计算下一个值。它们每一次循环只生成一个值，而不是把所有的</span></span><br><span class="line"><span class="comment"># 值全部算好。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># range的返回值也是一个生成器，不然一个1到900000000的列表会花很多时间和内存。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果你想用一个Python的关键字当作变量名，可以加一个下划线来区分。</span></span><br><span class="line">range_ = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">900000000</span>)</span><br><span class="line"><span class="comment"># 当找到一个 &gt;=30 的结果就会停</span></span><br><span class="line"><span class="comment"># 这意味着 `double_numbers` 不会生成大于30的数。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> double_numbers(range_):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 你也可以把一个生成器推导直接转换为列表</span></span><br><span class="line">values = (-x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">gen_to_list = <span class="built_in">list</span>(values)</span><br><span class="line"><span class="built_in">print</span>(gen_to_list)  <span class="comment"># =&gt; [-1, -2, -3, -4, -5]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器(decorators)</span></span><br><span class="line"><span class="comment"># 这个例子中，beg装饰say</span></span><br><span class="line"><span class="comment"># beg会先调用say。如果返回的say_please为真，beg会改变返回的字符串。</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">beg</span>(<span class="params">target_function</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">target_function</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        msg, say_please = target_function(*args, **kwargs)</span><br><span class="line">        <span class="keyword">if</span> say_please:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(msg, <span class="string">&quot;Please! I am poor :(&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@beg</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">say_please=<span class="literal">False</span></span>):</span><br><span class="line">    msg = <span class="string">&quot;Can you buy me a beer?&quot;</span></span><br><span class="line">    <span class="keyword">return</span> msg, say_please</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(say())  <span class="comment"># Can you buy me a beer?</span></span><br><span class="line"><span class="built_in">print</span>(say(say_please=<span class="literal">True</span>))  <span class="comment"># Can you buy me a beer? Please! I am poor :(</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/python/">python</category>
      
      
      <comments>http://v2better.top/2024/02/18/Python%E5%AD%A6%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>conda的小tips</title>
      <link>http://v2better.top/2023/12/04/conda%E7%9A%84%E5%B0%8Ftips/</link>
      <guid>http://v2better.top/2023/12/04/conda%E7%9A%84%E5%B0%8Ftips/</guid>
      <pubDate>Mon, 04 Dec 2023 08:02:40 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;conda:&lt;/p&gt;
&lt;p&gt;​    &lt;code&gt;conda env list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看当前已创建的虚拟环境&lt;/p&gt;
&lt;p&gt;​    &lt;code&gt;conda activate --名--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;切换虚拟环境&lt;/p&gt;
&lt;p&gt;​  </description>
        
      
      
      
      <content:encoded><![CDATA[<p>conda:</p><p>​    <code>conda env list</code></p><p>查看当前已创建的虚拟环境</p><p>​    <code>conda activate --名--</code></p><p>切换虚拟环境</p><p>​    <code>conda list</code></p><p>查看当前环境包含的包/库</p><p>​    <code>conda create -n --名-- python=3.9 (-c --镜像地址--)</code></p><p>创建新虚拟环境</p><p>​    <code>conda remove -n --名--  --all</code></p><p>删除虚拟环境及其包</p><p>​    <code>conda config --get</code></p><p>查看配置文件中有哪些通道（镜像）</p><p>​    <code>conda config --add/remove channels --通道地址--</code></p><p>添加/删除通道</p><p>(lstmStock) C:\Users\Administrator&gt;</p><p>​    <code>conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia</code></p><p>pytorch安装</p><p>国内源下载</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/AI/">AI</category>
      
      
      <comments>http://v2better.top/2023/12/04/conda%E7%9A%84%E5%B0%8Ftips/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机网络</title>
      <link>http://v2better.top/2022/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <guid>http://v2better.top/2022/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <pubDate>Sun, 18 Sep 2022 07:02:42 GMT</pubDate>
      
      <description>...</description>
      
      
      
      <content:encoded><![CDATA[<span id="more"></span><h1 id="概念，组成，功能，分类"><a href="#概念，组成，功能，分类" class="headerlink" title="概念，组成，功能，分类"></a>概念，组成，功能，分类</h1><h2 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h2><p><img src="/img/计网1.png" alt>  </p><h2 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h2><p>组成部分<br><img src="/img/计网2.png" alt>  </p><p>工作方式<br><img src="/img/计网3.png" alt>  </p><p>功能组成<br><img src="/img/计网4.png" alt></p><h2 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h2><ol><li>按分布范围分<br>广域网WAN 城域网MAN 局域网WAN 个人区域网PAN</li><li>按使用者分<br>公用网（中国电信）  专用网</li><li>按交换技术分<br>电路交换 报文交换 分组交换  </li><li>按拓扑结构分<br><img src="/img/计网5.png" alt>  </li><li>按传输技术分<br>广播式网络： 共享公共通信信道<br>点对点网络： 使用分组存储转发和路由选择啊机制<h1 id="标准化工作及相关组织"><a href="#标准化工作及相关组织" class="headerlink" title="标准化工作及相关组织"></a>标准化工作及相关组织</h1><h2 id="标准化工作"><a href="#标准化工作" class="headerlink" title="标准化工作"></a>标准化工作</h2><img src="/img/计网6.png" alt>  </li></ol><p>RFC<br><img src="/img/计网7.png" alt><br>注：草案标准（Draft Standard）于2011年起取消  </p><h2 id="标准化工作的相关组织"><a href="#标准化工作的相关组织" class="headerlink" title="标准化工作的相关组织"></a>标准化工作的相关组织</h2><p><img src="/img/计网8.png" alt></p>]]></content:encoded>
      
      
      <category domain="http://v2better.top/categories/%E9%98%85%E8%AF%BB%E5%BF%83%E5%BE%97/">阅读心得</category>
      
      
      
      <comments>http://v2better.top/2022/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
