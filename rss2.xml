<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Way2BeBetter</title>
    <link>http://v2better.top/</link>
    
    <atom:link href="http://v2better.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Just A Blog</description>
    <pubDate>Wed, 23 Oct 2024 12:34:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>最优包含</title>
      <link>http://v2better.top/2024/10/23/%E6%9C%80%E4%BC%98%E5%8C%85%E5%90%AB/</link>
      <guid>http://v2better.top/2024/10/23/%E6%9C%80%E4%BC%98%E5%8C%85%E5%90%AB/</guid>
      <pubDate>Wed, 23 Oct 2024 12:32:13 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;【问题描述】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;我们称一个字符串 S 包含字符串 T 是指 T 是 S 的一个子序列，即可以从字符串 S 中抽出若干字符，它们按原来的顺序组合成一个新的字符串与 T 完全一样。

给定两个字符串 S 和 T，请问最少修改 S 中的多少个字符，能使</description>
        
      
      
      
      <content:encoded><![CDATA[<p>【问题描述】</p><pre><code>我们称一个字符串 S 包含字符串 T 是指 T 是 S 的一个子序列，即可以从字符串 S 中抽出若干字符，它们按原来的顺序组合成一个新的字符串与 T 完全一样。给定两个字符串 S 和 T，请问最少修改 S 中的多少个字符，能使 S 包含 T？</code></pre><p>【输入形式】</p><pre><code>输入两行，每行一个字符串。第一行的字符串为 S，第二行的字符串为 T。两个字符串均为非空而且只包含大写英文字母。</code></pre><p>【输出形式】</p><pre><code>输出一个整数，表示答案。</code></pre><p>【样例输入】<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ABCDEABCD</span><br><span class="line">XAABZ</span><br></pre></td></tr></table></figure></p><p>【样例输出】<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></p><p>【评分标准】</p><pre><code>对于 20% 的评测用例，1 ≤ |T| ≤ |S| ≤ 20；对于 40% 的评测用例，1 ≤ |T| ≤ |S| ≤ 100；  对于所有评测用例，1 ≤ |T| ≤ |S| ≤ 1000。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">S</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">T</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> S.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> T.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp数组，初始化为一个较大的值</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化dp[i][0]为0，即当T为空串时，S总是可以包含T，且不需要修改</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化dp[0][j]为一个较大的值，即当S为空时，不可能包含非空的T</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = Integer.MAX_VALUE / <span class="number">2</span>;  <span class="comment">// 用无穷大表示不可能</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始动态规划</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S.charAt(i - <span class="number">1</span>) == T.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 如果S[i-1] == T[j-1]，可以不修改</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 否则，选择修改或者跳过当前字符</span></span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出答案</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> dp[n][m];</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://v2better.top/2024/10/23/%E6%9C%80%E4%BC%98%E5%8C%85%E5%90%AB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>网络延时</title>
      <link>http://v2better.top/2024/10/23/%E7%BD%91%E7%BB%9C%E5%BB%B6%E6%97%B6/</link>
      <guid>http://v2better.top/2024/10/23/%E7%BD%91%E7%BB%9C%E5%BB%B6%E6%97%B6/</guid>
      <pubDate>Wed, 23 Oct 2024 12:27:36 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;【问题描述】&lt;/p&gt;
&lt;p&gt;　　给定一个公司的网络，由n台交换机和m台终端电脑组成，交换机与交换机、交换机与电脑之间使用网络连接。交换机按层级设置，编号为1的交换机为根交换机，层级为1。其他的交换机都连接到一台比自己上一层的交换机上，其层级为对应交换机的层级加1。所有的终端</description>
        
      
      
      
      <content:encoded><![CDATA[<p>【问题描述】</p><p>　　给定一个公司的网络，由n台交换机和m台终端电脑组成，交换机与交换机、交换机与电脑之间使用网络连接。交换机按层级设置，编号为1的交换机为根交换机，层级为1。其他的交换机都连接到一台比自己上一层的交换机上，其层级为对应交换机的层级加1。所有的终端电脑都直接连接到交换机上。<br>　　当信息在电脑、交换机之间传递时，每一步只能通过自己传递到自己所连接的另一台电脑或交换机。请问，电脑与电脑之间传递消息、或者电脑与交换机之间传递消息、或者交换机与交换机之间传递消息最多需要多少步。 </p><p>【输入形式】</p><p>　　输入的第一行包含两个整数n, m，分别表示交换机的台数和终端电脑的台数。<br>　　第二行包含n - 1个整数，分别表示第2、3、……、n台交换机所连接的比自己上一层的交换机的编号。第i台交换机所连接的上一层的交换机编号一定比自己的编号小。<br>　　第三行包含m个整数，分别表示第1、2、……、m台终端电脑所连接的交换机的编号。 </p><p>【输出形式】</p><p>　　输出一个整数，表示消息传递最多需要的步数。</p><p>【样例输入】</p><p>　　4 2<br>　　1 1 3<br>　　2 1 </p><p>【样例输出】</p><p>　　4 </p><p>【样例说明】</p><p>　　 样例的网络连接模式如下，其中圆圈表示交换机，方框表示电脑：<br><img src="/img/79cca4e14630b6f10bce040e96d67e7f.png" alt><br>　　其中电脑1与交换机4之间的消息传递花费的时间最长，为4个单位时间。 </p><p>【样例输入】</p><p>　　4 4<br>　　1 2 2<br>　　3 4 4 4 </p><p>【样例输出】</p><p>　　4 </p><p>【样例说明】</p><pre><code> 样例的网络连接模式如下：</code></pre><p> <img src="/img/bf9944392011016f21822d7155bf88ae.png" alt><br> 其中电脑1与电脑4之间的消息传递花费的时间最长，为4个单位时间。</p><p>【评分标准】</p><p>   评测用例规模与约定<br>　　前30%的评测用例满足：n ≤ 5, m ≤ 5。<br>　　前50%的评测用例满足：n ≤ 20, m ≤ 20。<br>　　前70%的评测用例满足：n ≤ 100, m ≤ 100。<br>　　所有评测用例都满足：1 ≤ n ≤ 10000，1 ≤ m ≤ 10000。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> d1 = <span class="number">0</span>, d2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="type">int</span> d = <span class="built_in">dfs</span>(j);</span><br><span class="line">        <span class="keyword">if</span> (d &gt;= d2) &#123;</span><br><span class="line">            d1 = d2, d2 = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d &gt;= d1) &#123;</span><br><span class="line">            d1 = d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, d1 + d2);</span><br><span class="line">    <span class="keyword">return</span> d2 + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> p;</span><br><span class="line">        cin &gt;&gt; p;</span><br><span class="line">        <span class="built_in">add</span>(p, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> p;</span><br><span class="line">        cin &gt;&gt; p;</span><br><span class="line">        <span class="built_in">add</span>(p, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://v2better.top/2024/10/23/%E7%BD%91%E7%BB%9C%E5%BB%B6%E6%97%B6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>路径规划</title>
      <link>http://v2better.top/2024/10/23/path/</link>
      <guid>http://v2better.top/2024/10/23/path/</guid>
      <pubDate>Wed, 23 Oct 2024 12:26:14 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;【问题描述】&lt;/p&gt;
&lt;p&gt;　　G国国王来中国参观后，被中国的高速铁路深深的震撼，决定为自己的国家也建设一个高速铁路系统。&lt;br&gt;　　建设高速铁路投入非常大，为了节约建设成本，G国国王决定不新建铁路，而是将已有的铁路改造成高速铁路。现在，请你为G国国王提供一个方案，将现有的</description>
        
      
      
      
      <content:encoded><![CDATA[<p>【问题描述】</p><p>　　G国国王来中国参观后，被中国的高速铁路深深的震撼，决定为自己的国家也建设一个高速铁路系统。<br>　　建设高速铁路投入非常大，为了节约建设成本，G国国王决定不新建铁路，而是将已有的铁路改造成高速铁路。现在，请你为G国国王提供一个方案，将现有的一部分铁路改造成高速铁路，使得任何两个城市间都可以通过高速铁路到达，而且从所有城市乘坐高速铁路到首都的最短路程和原来一样长。请你告诉G国国王在这些条件下最少要改造多长的铁路。</p><p>【输入形式】</p><p>   输入的第一行包含两个整数n, m，分别表示G国城市的数量和城市间铁路的数量。所有的城市由1到n编号，首都为1号。<br>　　接下来m行，每行三个整数a, b, c，表示城市a和城市b之间有一条长度为c的双向铁路。这条铁路不会经过a和b以外的城市。</p><p>【输出形式】</p><p>   输出一行，表示在满足条件的情况下最少要改造的铁路长度。</p><p>【样例输入】</p><p>　　4 5<br>　　1 2 4<br>　　1 3 5<br>　　2 3 2<br>　　2 4 3<br>　　3 4 2</p><p>【样例输出】</p><p>　　11</p><p>【样例说明】</p><p>   对于20%的评测用例，1 ≤ n ≤ 10，1 ≤ m ≤ 50；<br>　　对于50%的评测用例，1 ≤ n ≤ 100，1 ≤ m ≤ 5000；<br>　　对于80%的评测用例，1 ≤ n ≤ 1000，1 ≤ m ≤ 50000；<br>　　对于100%的评测用例，1 ≤ n ≤ 10000，1 ≤ m ≤ 100000，1 ≤ a, b ≤ n，1 ≤ c ≤ 1000。输入保证每个城市都可以通过铁路达到首都。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 1e6</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> vis[MAX+<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cost[MAX+<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> dis[MAX+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">int</span> cost;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> nn,<span class="type">int</span> cc):<span class="built_in">num</span>(nn),<span class="built_in">cost</span>(cc)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node&amp;p)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> cost&gt;p.cost;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="type">int</span> cost;</span><br><span class="line"><span class="built_in">edge</span>(<span class="type">int</span> vv,<span class="type">int</span> cc):<span class="built_in">v</span>(vv),<span class="built_in">cost</span>(cc)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt; g[MAX+<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">priority_queue&lt;node&gt; pq;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dis[i]=INF;</span><br><span class="line">cost[i]=INF;</span><br><span class="line">vis[i]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(int i=0;i&lt;g[1].size();i++)&#123;</span></span><br><span class="line"><span class="comment">//edge e=g[1][i];</span></span><br><span class="line"><span class="comment">//dis[e.v]=e.cost;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;e.cost&lt;&lt;endl; </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">cost[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pq.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">node t=pq.<span class="built_in">top</span>();</span><br><span class="line">pq.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[t.num]) <span class="keyword">continue</span>;</span><br><span class="line">vis[t.num]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[t.num].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">edge e=g[t.num][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(vis[e.v]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> tmpcost=e.cost;</span><br><span class="line"><span class="keyword">if</span>(tmpcost+dis[t.num]&lt;dis[e.v])&#123;</span><br><span class="line">dis[e.v]=tmpcost+dis[t.num];</span><br><span class="line">cost[e.v]=tmpcost;</span><br><span class="line">pq.<span class="built_in">push</span>(<span class="built_in">node</span>(e.v,dis[e.v]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tmpcost+dis[t.num]==dis[e.v])&#123;</span><br><span class="line">cost[e.v]=<span class="built_in">min</span>(cost[e.v],tmpcost);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> cases,src,u,v,w;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;cases;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=cases;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">g[u].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(v,w));</span><br><span class="line">g[v].<span class="built_in">push_back</span>(<span class="built_in">edge</span>(u,w));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">dij</span>();</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans+=cost[i];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://v2better.top/2024/10/23/path/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>merkleTree-2024-08-20-08-20</title>
      <link>http://v2better.top/2024/10/23/merkleTree-2024-08-20/</link>
      <guid>http://v2better.top/2024/10/23/merkleTree-2024-08-20/</guid>
      <pubDate>Wed, 23 Oct 2024 12:04:03 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;该论文介绍了一种创新的方法，即通过自适应重构Merkle树来增强区块链的可扩展性。Merkle树是区块链体系结构的基本组成部分，负责确保数据</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>该论文介绍了一种创新的方法，即通过自适应重构Merkle树来增强区块链的可扩展性。Merkle树是区块链体系结构的基本组成部分，负责确保数据完整性并促进高效的验证过程。传统的静态树结构存在可扩展性问题，尤其是当区块链网络需要处理大量的交易时。</p><p>论文提出了自适应的Merkle树模型，该模型可以基于使用模式动态调整树的配置，从而显著减少平均路径长度，降低计算开销。研究展示了适用于二叉和非二叉树的自适应重构方法，并通过基于以太坊区块链的实验验证了这种方法的有效性，结果表明与传统Merkle树相比，自适应Merkle树在重构初期的效率提升达到了30%以上。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>借鉴哈夫曼树的优化方法，将使用频率较低的数据放到路径较长的叶子节点中。</p><p>平衡的Merkle树的平均路径长度<script type="math/tex">k=log_mn</script>m表示每个节点允许的最大子节点数(度);</p><p>自适应Merkle树的平均路径长度反映了霍夫曼码的平均长度，计算为所有码长的加权和，对应符号的概率作为权重</p><script type="math/tex; mode=display">k_A = \sum_{i=1}^n{p_i}*{l_i}</script><p>p是第i个符号出现的概率，l是第i个符号的编码长度。</p><p>由香农熵公式，给定特定概率分布的霍夫曼码的理论最小平均长度为：</p><script type="math/tex; mode=display">H = -\sum_{i=1}^n{p_i}*{log_m(p_i)}</script><p>Δ表示路径长度与理论最小路径长度之差，Δ的绝对值越小表示路径长度越小，开销越小</p><script type="math/tex; mode=display">Δ=k_A-H</script><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>假设原来有两个叶子节点：</p><p><img src="/img/Pasted%20image%2020241007162201.png" alt></p><p>新加节点C分别与A、B计算出Δ：</p><p><img src="/img/Pasted%20image%2020241007162310.png" alt></p><p><img src="/img/Pasted%20image%2020241007162332.png" alt></p><p>理想情况下，具有零差异(Δ= 0)的树结构即为最优结构。然而，这种理想的结构不一通过简单地向前面的配置添加叶子来实现，也就是说，单一对某个叶节点进行重构不一定能够达到Δ= 0。此时应该考虑交换叶子对。</p><p><img src="/img/Pasted%20image%2020241007162829.png" alt></p><p><img src="/img/Pasted%20image%2020241007163228.png" alt></p><p>叶子B, F和H是交换位置的候选，产生三种选择:</p><p><img src="/img/Pasted%20image%2020241007163339.png" alt></p><p>交换B和H的位置之后重新计算Δ：</p><p><img src="/img/Pasted%20image%2020241007163351.png" alt></p><p>此时继续交换叶子H、F得到Δ=0。</p><p>此外该方法也对多叉树起作用</p><h2 id="verkel树"><a href="#verkel树" class="headerlink" title="verkel树"></a>verkel树</h2><p>解决merkle树验证时需要节点的Merkle路径的问题</p><p>在Merkle树中，验证需要提供从叶子节点到根节点的所有兄弟节点的哈希值，而在Verkle树中，验证者只需要提供由向量承诺生成的证明，这样可以大大减少证明的大小。</p><h2 id="未来工作"><a href="#未来工作" class="headerlink" title="未来工作"></a>未来工作</h2><p>优化merkle树重构算法</p>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/BC/">BC</category>
      
      <category domain="http://v2better.top/tags/Paper/">Paper</category>
      
      
      <comments>http://v2better.top/2024/10/23/merkleTree-2024-08-20/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>paperRead</title>
      <link>http://v2better.top/2024/10/23/cloudStorage/</link>
      <guid>http://v2better.top/2024/10/23/cloudStorage/</guid>
      <pubDate>Wed, 23 Oct 2024 11:46:17 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Certificate-based-multi-copy-cloud-storage-auditing-supporting-data-dynamics&quot;&gt;&lt;a href=&quot;#Certificate-based-multi-copy-cloud-storage-a</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Certificate-based-multi-copy-cloud-storage-auditing-supporting-data-dynamics"><a href="#Certificate-based-multi-copy-cloud-storage-auditing-supporting-data-dynamics" class="headerlink" title="Certificate-based multi-copy cloud storage auditing supporting data dynamics"></a>Certificate-based multi-copy cloud storage auditing supporting data dynamics</h1><p>这篇文章针对当前多副本云存储审计的不足，提出了一种支持数据动态更新、基于证书的多副本云存储审计方案，旨在解决数据完整性验证中的多项挑战，如复杂的证书管理、密钥托管问题，以及抵御复制总和攻击。</p><h2 id="研究背景与问题"><a href="#研究背景与问题" class="headerlink" title="研究背景与问题"></a>研究背景与问题</h2><p>随着云计算技术的发展，用户将数据存储在云端以应对本地存储的限制。然而，云存储环境下，数据的完整性和可用性成为了关键问题，因为存储在云中的数据可能由于硬件故障、恶意攻击等原因而丢失或损坏，甚至云服务提供商也可能因恶意行为删除用户不常访问的数据。这种情况下，用户难以发现数据的损坏，因此，保证数据的完整性和安全性变得至关重要。</p><p>为了保证数据的完整性，Provable Data Possession (PDP) 方案被提出，用户可以在无需下载完整数据的情况下验证云中存储的数据完整性。随后的研究进一步提出了基于 PDP 的云存储审计方案，涉及数据隐私保护、用户撤销、数据去重和数据传输等多个问题。然而，多数方案仅存储单一副本，一旦数据丢失便无法恢复，因此，多副本存储成为提高数据可用性和恢复能力的有效策略。</p><h2 id="Leaves-Merkle-Hash-Tree-LMHT-由本论文提出"><a href="#Leaves-Merkle-Hash-Tree-LMHT-由本论文提出" class="headerlink" title="Leaves Merkle Hash Tree (LMHT)(由本论文提出)"></a>Leaves Merkle Hash Tree (LMHT)(由本论文提出)</h2><h3 id="LMHT-的结构特点"><a href="#LMHT-的结构特点" class="headerlink" title="LMHT 的结构特点"></a>LMHT 的结构特点</h3><p>LMHT 的基本构成类似于传统的 Merkle 哈希树，但它在节点的设计和数据管理上有一些改进和扩展：<br><img src="/img/Pasted_image_20241007151741.png" alt></p><ol><li><strong>节点的组成</strong>：</li></ol><ul><li><p>在 LMHT 中，<strong>每个节点 (N)</strong> 包含以下三项内容：</p></li><li><p><strong>哈希值 (h)</strong>：当前节点的哈希值。</p></li><li><p><strong>左子树叶节点数量 (n_l)</strong>：左子树中包含的叶节点数量。</p></li><li><p><strong>右子树叶节点数量 (n_r)</strong>：右子树中包含的叶节点数量。</p></li></ul><ol><li><strong>叶节点的哈希值计算</strong>：</li></ol><ul><li><p>每个叶节点存储的是数据块副本的哈希值。具体来说，第 <em>j</em> 个叶节点的哈希值计算为： <em>h<sub>j</sub>=h(b<sub>1j</sub> ∥ b<sub>2j</sub> ∥ ⋯ ∥ b<sub>Pj</sub> ∥ T<sub>j</sub>)</em> 其中：</p></li><li><p><em>b<sub>ij</sub>​</em> 表示第 <em>j</em> 个数据块的第 <em>i</em> 个副本。</p></li><li><p><em>P</em> 是数据块副本的数量。</p></li><li><p><em>T<sub>j</sub></em>是该数据块的创建或修改时间戳。</p></li><li><p>叶节点的 <em>n_l</em> <em>和</em> <em>n_r</em>​ 都为 0。</p></li></ul><ol><li><strong>非叶节点的哈希值计算</strong>：</li></ol><ul><li><p>非叶节点 NNN 的哈希值由其左右子节点的哈希值组合计算： *h=h(left_child_hash ∥ right_child_hash)</p></li><li><p>对于非叶节点，<em>n_l</em> 和 <em>n_r</em> 分别表示左子树和右子树中的叶节点数量，可以通过对子树的 <em>n_l​</em> 和 <em>n_r​</em> 求和得到。</p></li></ul><h3 id="LMHT-的优势"><a href="#LMHT-的优势" class="headerlink" title="LMHT 的优势"></a>LMHT 的优势</h3><p><img src="/img/Pasted_image_20241007151741.png" alt></p><p>LMHT 的设计在数据动态更新（尤其是删除操作）方面具有显著的优势，特别是在以下几点：</p><ol><li><strong>高效的连续数据块删除</strong>：</li></ol><ul><li><p>LMHT 在连续删除多个数据块时，通过记录子树中叶节点的数量，可以快速判断是否可以直接删除整棵子树。</p></li><li><p>具体来说，当需要删除某个范围内的数据块时，LMHT 能够通过比较左右子树的叶节点数量，直接删除整个子树，而不需要逐个节点地进行更新。这样可以显著降低连续删除操作的复杂度，从而提高删除效率。</p></li><li><p>删除的时间复杂度为 O(log⁡<sub>2</sub>n)，其中 n 是数据块总数。而传统的 Merkle 树需要 O(d*log⁡<sub>2</sub>n) 的时间复杂度来删除 d 个连续的数据块，这意味着 LMHT 在连续删除多个数据块时更为高效。</p></li></ul><ol><li><strong>支持数据的动态更新</strong>：</li></ol><ul><li><p>LMHT 支持对数据块的 <strong>插入、修改和删除</strong> 操作，并且在进行这些操作后，能够高效地更新哈希树结构，从而保持数据的完整性。</p></li><li><p>例如，<strong>插入操作</strong> 会通过深度优先搜索的方法定位到要插入的位置，并将新的叶节点作为兄弟节点添加到目标节点旁，同时更新所有父节点的哈希值和叶节点数量信息。</p></li></ul><ol><li><strong>数据动态性的有效性</strong>：</li></ol><ul><li>在进行数据动态更新时，LMHT 能够同步更新所有副本的数据块和相应的哈希值，确保多副本数据块之间的一致性和完整性。</li></ul><ol><li><strong>抵御复制总和攻击</strong>：</li></ol><ul><li>在 LMHT 中，<strong>时间戳 (T<sub>j</sub>)</strong> 被嵌入到叶节点中，用于防止云服务商通过未修改的旧数据块或副本总和来通过数据完整性验证。这样可以有效防止复制总和攻击，确保云服务商必须存储所有完整的数据副本，而不能通过简单计算数据块之和来欺骗验证过程。</li></ul>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/BC/">BC</category>
      
      <category domain="http://v2better.top/tags/Paper/">Paper</category>
      
      
      <comments>http://v2better.top/2024/10/23/cloudStorage/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>blockchain</title>
      <link>http://v2better.top/2024/06/26/blockchain/</link>
      <guid>http://v2better.top/2024/06/26/blockchain/</guid>
      <pubDate>Tue, 25 Jun 2024 16:21:23 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;基于堆栈的语言，比如forth：&quot;&gt;&lt;a href=&quot;#基于堆栈的语言，比如forth：&quot; class=&quot;headerlink&quot; title=&quot;基于堆栈的语言，比如forth：&quot;&gt;&lt;/a&gt;基于堆栈的语言，比如forth：&lt;/h2&gt;&lt;p&gt;示例代码&lt;/p&gt;
&lt;p&gt;以F</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="基于堆栈的语言，比如forth："><a href="#基于堆栈的语言，比如forth：" class="headerlink" title="基于堆栈的语言，比如forth："></a>基于堆栈的语言，比如forth：</h2><p>示例代码</p><p>以Forth为例，展示一个简单的加法操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 + .</span><br></pre></td></tr></table></figure><p>上述代码的解释是：</p><ol><li>将数字3推入堆栈。</li><li>将数字4推入堆栈。</li><li>执行加法操作，将堆栈顶部的两个数字相加，并将结果（7）推回堆栈。</li><li><code>.</code> 操作符从堆栈中取出并打印结果。</li></ol><h2 id="图灵不完备"><a href="#图灵不完备" class="headerlink" title="图灵不完备"></a>图灵不完备</h2><p>  比特币交易脚本语言包含许多运算符，但在一个重要方面有意限制——它没有循环或复杂的流程控制能力，除了条件流程控制。这确保了该语言不是图灵完备的，也就是说，脚本具有有限的复杂性和可预测的执行时间。</p><h2 id="图灵完备"><a href="#图灵完备" class="headerlink" title="图灵完备"></a>图灵完备</h2><p>  图灵完备是指在可计算性理论里，如果一系列操作数据的规则（如指令集、编程语言、细胞自动机）按照一定的顺序，可以计算出结果<br>  在给定无限内存的情况下，以太坊可以计算任何图灵机可以计算的算法。”<br>  图灵完备带来运算方便性的同时，也带来安全和资源管理问题。“陷入死循环的打印机可以关闭并再次打开，但是这对于公共区块链却是不可能的”。ETH通过gas机制在保证图灵完备的的同时，限制了程序可以使用的资源量。</p><h2 id="比特币中输入和输出的理解"><a href="#比特币中输入和输出的理解" class="headerlink" title="比特币中输入和输出的理解"></a>比特币中输入和输出的理解</h2><p>  比特币中输入和输出，其主语（对象）是一个交易（TX）</p><p><img src="/img/20190905104834923.jpeg" alt="20190905104834923"></p><h2 id="UTXO（Unspent-Transaction-Output，未花费交易输出）"><a href="#UTXO（Unspent-Transaction-Output，未花费交易输出）" class="headerlink" title="UTXO（Unspent Transaction Output，未花费交易输出）"></a>UTXO（Unspent Transaction Output，未花费交易输出）</h2><p>  每一笔TX都会消耗一个或多个UTXO，生成一个或多个UTXO<br>  交易输入（input）引用之前交易的UTXO<br>  交易输出（output）生成新的UTXO<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">以下展示TX示例 </span><br><span class="line">（1）A与B交易（忽略手续费）</span><br><span class="line">输入：</span><br><span class="line">    引用了A持有的含有5个BTC的UTXO</span><br><span class="line">输出：</span><br><span class="line">    2个BTC发给B（新UTXO，归B持有）</span><br><span class="line">    找零3个BTC（新UTXO，仍归A持有）</span><br><span class="line">    </span><br><span class="line">（2）合并UTXO操作（忽略手续费）</span><br><span class="line">输入：</span><br><span class="line">    A的3个UTXO，分别含有0.5，1.5，3个BTC</span><br><span class="line">输出：</span><br><span class="line">    一个含5个BTC的UTXO（归A持有）</span><br></pre></td></tr></table></figure></p><p>《精通比特币 第三版》原文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用比特币的区块链存储与比特币支付无关的数据是一个颇具争议的议题。许多人认为这种使用是滥用的，希望予以遏制。而另一些人则将其视为区块链技术强大功能的展示，并希望鼓励这种实验。反对包含非支付数据的人士认为，这给运行完整比特币节点的人带来了负担，因为他们需要承担为区块链不打算承载的数据而进行的磁盘存储成本。此外，这样的交易可能会创建无法被花费的UTXO，使用传统比特币地址作为自由格式的20字节字段。由于该地址用于存储数据，它不对应于私钥，因此生成的UTXO永远无法被花费；这是一个虚假的支付。因此，永远无法被花费的这些交易从未从UTXO集中移除，并导致UTXO数据库的大小永远增加，或者说“膨胀”。</span><br></pre></td></tr></table></figure><p>  我的理解是，UTXO被花费并不能缓解数据膨胀，因为根据UTXO的特点，UTXO被花费后会生成一个或多个UTXO，UTXO数据库仍然是膨胀的。与原文想法相同的是，无法花费的“虚假”UTXO应被存储在区块链中而不是UTXO数据库中。<br>  解决方式是引入OP_RETURN，OP_RETURN脚本没有对应的输入，因此无法用于花费</p><h2 id="有效区块的特征"><a href="#有效区块的特征" class="headerlink" title="有效区块的特征"></a>有效区块的特征</h2><p>• 区块数据结构在语法上是有效的。 </p><p>• 区块头哈希小于目标值（实施工作证明）。</p><p>• 区块时间戳位于 MTP 和未来两小时之间（允许时间误差）。</p><p>• 区块权重在可接受范围内。 </p><p>• 第一个交易（仅第一个）是 coinbase 交易。 </p><p>• 区块中的所有交易都使用“交易独立验证”部分讨论的交易清单进行验证。</p><h2 id="区块确认时间为何是10分钟"><a href="#区块确认时间为何是10分钟" class="headerlink" title="区块确认时间为何是10分钟"></a>区块确认时间为何是10分钟</h2><ol><li>若每个区块确认时间过短，会导致安全性降低：当区块生成时间缩短时，网络节点之间同步区块的时间变少，导致多个矿工可能同时挖出有效区块。这样会增加意外分叉的发生率，导致一些矿工的工作被浪费。</li><li>若每个区块确认时间过长：诚然，安全性会变高；但是会导致交易确认延迟，区块吞吐量下降等问题</li></ol>]]></content:encoded>
      
      
      
      
      <comments>http://v2better.top/2024/06/26/blockchain/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>深度学习预测前置知识</title>
      <link>http://v2better.top/2024/05/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%A2%84%E6%B5%8B%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</link>
      <guid>http://v2better.top/2024/05/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%A2%84%E6%B5%8B%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</guid>
      <pubDate>Tue, 28 May 2024 08:38:40 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;解析解:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    解可以用一个公式简单地表达出来， 这类解叫作解析解（analytical solution）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;梯度下降&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​     它通过不</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>解析解:</strong></p><p>​    解可以用一个公式简单地表达出来， 这类解叫作解析解（analytical solution）</p><p><strong><em>梯度下降</em>:</strong></p><p>​     它通过不断地在损失函数递减的方向上更新参数来降低误差。</p><p>​      梯度下降最简单的用法是计算损失函数（数据集中所有样本的损失均值） 关于模型参数的导数（在这里也可以称为梯度）</p><p><strong><em>泛化</em>（generalization）:</strong></p><p>​    找到一组参数，这组参数能够在我们从未见过的数据上实现较低的损失</p><p><strong>超参数:</strong></p><p>​    这些可以调整但不在训练过程中更新的参数称为<em>超参数</em>（hyperparameter）</p><p>​    <em>调参</em>（hyperparameter tuning）是选择超参数的过程</p><p><strong>random.shuffle():</strong></p><p>​    在训练机器学习模型时，经常会对数据进行随机打乱的操作。这有助于模型学习更好地泛化，因为模型不会过于依赖于特定的样本顺序。通过随机打乱数据，模型在每个批次中都能够看到不同的样本，从而更好地学习数据的分布和模式。</p><p><strong>归一化，标准化：</strong></p><p><strong>sigmoid函数：</strong></p><p>f(x) = 1/(1+e^-x)</p><h2 id="现阶段主流的股价预测模型"><a href="#现阶段主流的股价预测模型" class="headerlink" title="现阶段主流的股价预测模型"></a>现阶段主流的股价预测模型</h2><h3 id="1-ARIMA模型"><a href="#1-ARIMA模型" class="headerlink" title="1.ARIMA模型"></a>1.ARIMA模型</h3><p>ARIMA模型（英语：AutoregressiveIntegratedMovingAverage model），差分整合移动平均自回归模型，又称整合移动平均自回归模型（移动也可称作滑动），时间序列预测分析方法之一。ARIMA（p，d，q）中，AR是”自回归”，p为自回归项数；MA为”滑动平均”，q为滑动平均项数，d为使之成为平稳序列所做的差分次数（阶数）。“差分”一词虽未出现在ARIMA的英文名称中，却是关键步骤。ARIMA 模型是在平稳的时间序列基础上建立起来的，因此时间序列的平稳性是建模的重要前提。检验时间序列模型平稳的方法一般采用 ADF 单位根检验模型去检验。当然如果时间序列不稳定，也可以通过一些操作去使得时间序列稳定（比如取对数，差分），然后进行 ARIMA 模型预测，得到稳定的时间序列的预测结果，然后对预测结果进行之前使序列稳定的操作的逆操作（取指数，差分的逆操作），就可以得到原始数据的预测结果。</p><h3 id="2-基于随机过程的马尔科夫链模型"><a href="#2-基于随机过程的马尔科夫链模型" class="headerlink" title="2.基于随机过程的马尔科夫链模型"></a>2.基于随机过程的马尔科夫链模型</h3><p>马尔科夫过程是研究事物状态以及其状态转移规律的理论，适合于时间序列以及空间序列，一个时间与状态都是离散的马尔科夫过程叫做马尔科夫链，也叫马氏链（Markov Chain），马氏链模型是一类描述随机动态系统的模型，其特点是①系统每个时刻所处的状态都是随机的，②从一个时刻到下一个时刻的状态按照一定的概率转移，③下一个时刻的状态只取决于当前时刻的状态和转移概率，与其他时刻状态无关。</p><h3 id="3-基于SVM的模型"><a href="#3-基于SVM的模型" class="headerlink" title="3.基于SVM的模型"></a>3.基于SVM的模型</h3><p>支持向量机（SVM）是Vapnik和Cortes于1995年首先提出的，建立在统计学习理论的VC维理论和结构风险最小原理基础上的，它在解决小样本、非线性及高维模式识别中表现出许多特有的优势。支持向量机将非线性问题映射到高维空间，引入核函数，解决了非线性分类问题。支持向量回归（SVR）是支持向量机的推广，通过引入ε不敏感损失函数，将问题转化为通过对已知的样本数据学习找到一个拟合函数，对未知的数据进行预测，这个函数f(x)对实际的 值最大偏差为ε，从而构建回归模型。在金融领域的应用中，Trafalis和Ince研究发现SVR的预测精度远高于MLP（多层感知机）和ARIMA（差分滑动平均自回归模型），并且与神经网络相比有更加出色的性能。</p><h3 id="4-基于XGBoost集成树模型"><a href="#4-基于XGBoost集成树模型" class="headerlink" title="4.基于XGBoost集成树模型"></a>4.基于XGBoost集成树模型</h3><p>XGBoost算法是陈天奇博士于2016年提出的基于回归树的提升算法，在市场价格估计、高能物理事件分类、网络文本分类、客户行为分析等诸多机器学习任务中均表现了出色的性能，并且算法因其高度可扩展性和并行化能力，在大规模数据回归和分类任务上也有着优异的表现。2017年，Ren年将XGBoost与卷积神经网络结合，用于图像分类；同年，Chen将加权的XGBoost模型应用于雷达信号分类并取得了很好的效果。</p><h3 id="5-基于深度学习的模型"><a href="#5-基于深度学习的模型" class="headerlink" title="5.基于深度学习的模型"></a>5.基于深度学习的模型</h3><p>近年来，深度学习方法在人工智能领域取得了突破性的进展，深度神经网络在图像识别、人脸检测与识别、语音识别、目标捕捉、机器翻译等多个领域都有长足的进步。一方面由于积累的数据量的提高，达到了深度学习所需要的量级，另一方面，机器运算性能的提升，也使深度学习方法有了硬件的基础。深度学习方法可以通过组合浅层次的特征形成更加抽象的高层特征表示，以发现数据的深层次隐含关系，通过多层神经网络的堆叠和激活函数的选取，可以更好地拟合复杂的非线性函数。由于市场规律的复杂性、市场价格的波动性、影响因素的多样性，仅仅依赖传统的策略分析和模型不足以应对这些挑战，而深度学习方法的引入，能够提高对这些问题的解决能力，训练出泛化能力更强的模型，对股票投资来说是具有重要的参考意义。</p><p>由于股价数据具有很强的时间关联性，我们自然想到使用LSTM（Long Short-Term Memory）或者GRU（Gated Recurrent Unit）模型挖掘股价数据在时间上的相关性。同时，中国股票市场受政策面影响很大，经济新闻和上市公司财报等文本数据也会成为股价波动的重要原因。目前研究者们普遍在股价数据的时间序列特征和经济金融信息文本特征两个大方面，使用深度学习模型对其进行预测和分析，也有学者综合以上两种特征，构造既包括技术面参数也包括基本面分析的股价特征向量，输入到模型进行学习，均取得了不错的效果，并有多种模型已经使用到荐股软件或者金融领域中。本文作为综述，只简单的介绍模型以及其基本原理，并期待相关模型能在论文和实验中表现出优秀的性能。</p>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/python/">python</category>
      
      
      <comments>http://v2better.top/2024/05/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%A2%84%E6%B5%8B%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>nonlocal解释</title>
      <link>http://v2better.top/2024/05/28/nonlocal%E8%A7%A3%E9%87%8A/</link>
      <guid>http://v2better.top/2024/05/28/nonlocal%E8%A7%A3%E9%87%8A/</guid>
      <pubDate>Tue, 28 May 2024 08:34:48 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;nonlocal-global&quot;&gt;&lt;a href=&quot;#nonlocal-global&quot; class=&quot;headerlink&quot; title=&quot;nonlocal global&quot;&gt;&lt;/a&gt;nonlocal global&lt;/h2&gt;&lt;p&gt;对nonlocal 关键字感到有些困</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="nonlocal-global"><a href="#nonlocal-global" class="headerlink" title="nonlocal global"></a>nonlocal global</h2><p>对nonlocal 关键字感到有些困惑，上手实践一下</p><p>Definition：</p><p>The <code>nonlocal</code> keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function.</p><p>Use the keyword <code>nonlocal</code> to declare that the variable is not local.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="string">&quot;Global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    count = <span class="string">&#x27;Enclosing&#x27;</span><span class="comment">#如果不事先声明，那么函数b中的nonlocal就会报错</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">        count = <span class="string">&#x27;Local&#x27;</span></span><br><span class="line">    b()</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a()</span><br><span class="line">    <span class="built_in">print</span>(count)<span class="comment">#输出Global</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enclosing</span><br><span class="line">Local</span><br><span class="line">Global</span><br></pre></td></tr></table></figure><p>nonlocal 可以让a()中count变量变为非局部，可以让b()使用</p><h4 id="global作为对比"><a href="#global作为对比" class="headerlink" title="global作为对比"></a>global作为对比</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">        <span class="keyword">global</span> a<span class="comment">#没有global，则a=a+1会出错</span></span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/python/">python</category>
      
      
      <comments>http://v2better.top/2024/05/28/nonlocal%E8%A7%A3%E9%87%8A/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Bayes</title>
      <link>http://v2better.top/2024/04/03/Bayes/</link>
      <guid>http://v2better.top/2024/04/03/Bayes/</guid>
      <pubDate>Wed, 03 Apr 2024 06:41:48 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;贝叶斯算法是一类基于贝叶斯定理的统计方法，用于进行概率推断和分类任务。它以18世纪的英国数学家托马斯·贝叶斯的名字命名。贝叶斯算法的核心思想是利用先验概率和观测数据来计算后验概率，从而进行推断或分类。&lt;/p&gt;
&lt;p&gt;下面是贝叶斯算法的基本原理和步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;l</description>
        
      
      
      
      <content:encoded><![CDATA[<p>贝叶斯算法是一类基于贝叶斯定理的统计方法，用于进行概率推断和分类任务。它以18世纪的英国数学家托马斯·贝叶斯的名字命名。贝叶斯算法的核心思想是利用先验概率和观测数据来计算后验概率，从而进行推断或分类。</p><p>下面是贝叶斯算法的基本原理和步骤：</p><ol><li><p><strong>贝叶斯定理</strong>：贝叶斯定理描述了在给定观测数据的情况下，计算参数的后验概率。其数学表达式为：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex;" xmlns="http://www.w3.org/2000/svg" width="22.167ex" height="3.607ex" role="img" focusable="false" viewbox="0 -1047.1 9797.9 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(2167.8,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(2723.6,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(3482.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(4149.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(5205.1,0)"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(1899,0)"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(2177,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(2927,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3316,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(3594,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(4345,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4734,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(5484,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mrow" transform="translate(1487.5,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(1899,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><rect width="4352.8" height="60" x="120" y="220"/></g></g></g></svg></mjx-container></p><p>其中：</p><p><img src="/img/image-20240403150126867.png" alt="image-20240403150126867"></p></li><li><p><strong>先验概率</strong>：在贝叶斯推断中，先验概率是在观测数据之前对事件发生概率的估计。它是根据经验知识或先前的数据进行估计的。</p></li><li><p><strong>似然度</strong>：似然度是在给定参数或假设的情况下观测到数据的概率。它描述了数据如何依赖于参数或假设。</p></li><li><p><strong>后验概率</strong>：后验概率是在观测到数据后对参数或假设的更新概率。它是通过贝叶斯定理计算得到的。</p></li><li><p><strong>贝叶斯分类器</strong>：在分类任务中，贝叶斯算法可以用来建立分类模型。通过估计每个类别的先验概率和似然度，可以计算出给定观测数据后每个类别的后验概率，并选择具有最高后验概率的类别作为预测结果。</p></li><li><p><strong>贝叶斯网络</strong>：贝叶斯网络是一种用图形表示变量之间条件依赖关系的概率图模型。它由节点和有向边组成，节点表示随机变量，有向边表示变量之间的依赖关系。贝叶斯网络可以用于推断概率、预测变量值和解释因果关系等任务。</p></li></ol><p>总的来说，贝叶斯算法通过利用贝叶斯定理将先验知识和观测数据结合起来，实现了对参数或假设的更新和推断，从而在不确定性环境中进行概率推断和分类。</p><p>朴素贝叶斯算法包括<code>GaussianNB</code>、<code>MultinomialNB</code> 和 <code>BernoulliNB</code> 等贝叶斯分类器</p><ol><li><strong>高斯朴素贝叶斯（Gaussian Naive Bayes）</strong>：<ul><li>适用于特征的分布服从高斯分布（正态分布）的情况。</li><li>特征数据是连续型变量时，通常使用高斯朴素贝叶斯。</li><li>在 <code>scikit-learn</code> 中，使用 <code>GaussianNB</code> 类来实现高斯朴素贝叶斯分类器。</li></ul></li><li><strong>多项式朴素贝叶斯（Multinomial Naive Bayes）</strong>：<ul><li>适用于特征的分布是多项分布的情况，即特征是表示计数的离散型变量。</li><li>在文本分类等问题中，特征通常表示单词出现的频次或文档中的词袋模型，这种情况下使用多项式朴素贝叶斯比较合适。</li><li>在 <code>scikit-learn</code> 中，使用 <code>MultinomialNB</code> 类来实现多项式朴素贝叶斯分类器。</li></ul></li><li><strong>伯努利朴素贝叶斯（Bernoulli Naive Bayes）</strong>：<ul><li>适用于特征是布尔型变量（二元变量）的情况，即特征是表示是否出现的二值型变量。</li><li>在文本分类中，通常将特征表示为单词是否出现在文档中，这种情况下使用伯努利朴素贝叶斯比较合适。</li><li>在 <code>scikit-learn</code> 中，使用 <code>BernoulliNB</code> 类来实现伯努利朴素贝叶斯分类器。</li></ul></li></ol>]]></content:encoded>
      
      
      
      
      <comments>http://v2better.top/2024/04/03/Bayes/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数据增强</title>
      <link>http://v2better.top/2024/03/26/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/</link>
      <guid>http://v2better.top/2024/03/26/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/</guid>
      <pubDate>Tue, 26 Mar 2024 11:59:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Mosaic: &lt;/p&gt;
&lt;p&gt;​        Mosaic数据增强是一种用于图像数据增强的技术，主要用于目标检测任务。它通过将多个图像拼接成一个大图像来增加训练数据的多样性。&lt;/p&gt;
&lt;p&gt;Copy paste:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     &amp;quot;Co</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Mosaic: </p><p>​        Mosaic数据增强是一种用于图像数据增强的技术，主要用于目标检测任务。它通过将多个图像拼接成一个大图像来增加训练数据的多样性。</p><p>Copy paste:</p><pre><code>     &quot;Copy-paste&quot; 数据增强是一种用于目标检测任务的技术，它通过从原始图像中复制并粘贴目标来生成新的训练样本。这种方法可以增加数据集中的样本数量，并改变目标在不同背景下的外观和位置。</code></pre><p>Random affine: </p><p>​        “Random affine” 是一种数据增强技术，常用于图像处理任务中，包括图像分类、目标检测、语义分割等。它通过随机变换图像的仿射变换来生成多样化的训练样本，从而提高模型的泛化能力和鲁棒性。</p><p>Mix up:</p><p>​        “Mix Up” 是一种用于数据增强的技术，特别适用于图像分类任务。它通过线性插值的方式将两个图像及其对应的标签混合在一起，生成新的训练样本。</p><p>Augment HSV:</p><p>​        “Augment HSV” 是一种图像数据增强技术，它主要基于修改图像的色调（Hue）、饱和度（Saturation）和亮度（Value）来生成新的训练样本。这些调整是基于图像的HSV颜色空间进行的。</p>]]></content:encoded>
      
      
      
      <category domain="http://v2better.top/tags/python/">python</category>
      
      <category domain="http://v2better.top/tags/CV/">CV</category>
      
      
      <comments>http://v2better.top/2024/03/26/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
